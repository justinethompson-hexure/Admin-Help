<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd">
    <head>
        <link href="../../Resources/Stylesheets/2017MainStyles.css" rel="stylesheet" type="text/css" />
        <meta name="description" content="Rules, rule nodes, rule sets" />
    </head>
    <body>
        <h1><a name="top"></a>Advanced Rules Category and Element Definitions Reference</h1>
        <p>Use the following categories and associated element definitions when adding an advanced rule on the Rules Window.</p>
        <p MadCap:conditions="General.PDF">Click a link to go to the category:</p>
        <p MadCap:conditions="General.PDF">
            <MadCap:xref href="#Condition" alt="Condition">|Condition</MadCap:xref>
        </p>
        <p MadCap:conditions="General.PDF">
            <MadCap:xref href="#Control" alt="Control">|Control</MadCap:xref>
        </p>
        <p MadCap:conditions="General.PDF">
            <MadCap:xref href="#Convert" alt="Convert">|Convert</MadCap:xref>
        </p>
        <p MadCap:conditions="General.PDF">
            <MadCap:xref href="#DateTime" alt="DateTime">|DateTime</MadCap:xref>
        </p>
        <p MadCap:conditions="General.PDF">
            <MadCap:xref href="#GetSet" alt="Get Set">|Get Set</MadCap:xref>
        </p>
        <p MadCap:conditions="General.PDF">
            <MadCap:xref href="#List" alt="List">|List</MadCap:xref>
        </p>
        <p MadCap:conditions="General.PDF">
            <MadCap:xref href="#Math" alt="Math">|Math</MadCap:xref>
        </p>
        <p MadCap:conditions="General.PDF">
            <MadCap:xref href="#Reflection" alt="Reflection">|Reflection</MadCap:xref>
        </p>
        <p MadCap:conditions="General.PDF">
            <MadCap:xref href="#String" alt="String">|String</MadCap:xref>
        </p>
        <p MadCap:conditions="General.PDF">
            <MadCap:xref href="#Const" alt="Const">|Const</MadCap:xref>
        </p>
        <p MadCap:conditions="General.PDF">
            <MadCap:xref href="#Null" alt="null">|null</MadCap:xref>
        </p>
        <p MadCap:conditions="General.PDF">
            <MadCap:xref href="#Popup" alt="popup">|popup</MadCap:xref>
        </p>
        <p MadCap:conditions="General.PDF">
            <MadCap:xref href="#PostMessage" alt="postmessage">|postmessage</MadCap:xref>
        </p>
        <p MadCap:conditions="General.PDF">
            <MadCap:xref href="#RemoveMessage" alt="removemessage">|removemessage</MadCap:xref>
        </p>
        <MadCap:pageBreak />
        <h2 MadCap:conditions="General.PDF"><a name="Condition"></a>|Condition</h2>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:conditionalText MadCap:conditions="General.Online">
                    <MadCap:dropDownHotspot><a name="ConditionOnline"></a>|Condition</MadCap:dropDownHotspot>
                </MadCap:conditionalText>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|and</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>The boolean AND operator. Adds the sub-nodes together and returns the result. Accepts 1 to many sub-nodes.</p>
                        <p>Truth Table:</p>
                        <table style="margin-left: 0;margin-right: auto;caption-side: top;">
                            <caption class="Table">Truth Table </caption>
                            <col style="width: 78px;" />
                            <col style="width: 78px;" />
                            <col />
                            <thead>
                                <tr>
                                    <th>One</th>
                                    <th>Two</th>
                                    <th>AND(One,Two)</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>True</td>
                                    <td>True</td>
                                    <td>True</td>
                                </tr>
                                <tr>
                                    <td>True</td>
                                    <td>False</td>
                                    <td>False</td>
                                </tr>
                                <tr>
                                    <td>False</td>
                                    <td>True</td>
                                    <td>False</td>
                                </tr>
                                <tr>
                                    <td>False</td>
                                    <td>False</td>
                                    <td>False</td>
                                </tr>
                            </tbody>
                        </table>
                        <p>Bizarro world: If the first-child subnode of an &lt;and&gt; node is &lt;compare op="!="&gt; then the and will behave like an &lt;or&gt; node.</p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot> For example:</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>If the first-child subnode of an &lt;and&gt; node is &lt;compare op="!="&gt; then the and will behave like an &lt;or&gt; node</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Whoops! That &lt;and&gt; now behaves like an &lt;or&gt; --&gt;
										&lt;and&gt;
										&lt;compare op="!="&gt;
										&lt;diget dataitemid="FLI_ISSUED_STATE_ABBREV" /&gt;
										&lt;const value="AK" type="String" /&gt;
										&lt;/compare&gt;
										&lt;compare op="&amp;gt;="&gt;
										&lt;diget dataitemid="ChildRider_Numbers" type="Int32" /&gt;
										&lt;const value="6" type="Int32" /&gt;
										&lt;/compare&gt;
										&lt;compare op="!="&gt;
										&lt;diget dataitemid="FLI_ISSUED_STATE_ABBREV" /&gt;
										&lt;const value="AR" type="String" /&gt;
										&lt;/compare&gt;
										&lt;compare op="!="&gt;
										&lt;diget dataitemid="FLI_ISSUED_STATE_ABBREV" /&gt;
										&lt;const value="AZ" type="String" /&gt;
										&lt;/compare&gt;
										&lt;compare op="!="&gt;
										&lt;diget dataitemid="FLI_ISSUED_STATE_ABBREV" /&gt;
										&lt;const value="CA" type="String" /&gt;
										&lt;/compare&gt;
										&lt;/and&gt;
										&lt;!-- To turn the &lt;and&gt; back into an &lt;and&gt; move the &amp;gt;= compare node to the top --&gt;
										&lt;and&gt;
										&lt;compare op="&amp;gt;="&gt;
										&lt;diget dataitemid="ChildRider_Numbers" type="Int32" /&gt;
										&lt;const value="6" type="Int32" /&gt;
										&lt;/compare&gt;
										&lt;compare op="!="&gt;
										&lt;diget dataitemid="FLI_ISSUED_STATE_ABBREV" /&gt;
										&lt;const value="AK" type="String" /&gt;
										&lt;/compare&gt;
										&lt;compare op="!="&gt;
										&lt;diget dataitemid="FLI_ISSUED_STATE_ABBREV" /&gt;
										&lt;const value="AR" type="String" /&gt;
										&lt;/compare&gt;
										&lt;compare op="!="&gt;
										&lt;diget dataitemid="FLI_ISSUED_STATE_ABBREV" /&gt;
										&lt;const value="AZ" type="String" /&gt;
										&lt;/compare&gt;
										&lt;compare op="!="&gt;
										&lt;diget dataitemid="FLI_ISSUED_STATE_ABBREV" /&gt;
										&lt;const value="CA" type="String" /&gt;
										&lt;/compare&gt;
									&lt;/and&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes: </p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes: </p>
                        <ul>
                            <li>A list of 1 to n nodes that return boolean values</li>
                        </ul>
                        <p>Returns: </p>
                        <ul>
                            <li>A boolean</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>and</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- this would return false since the last value is false --&gt;
								&lt;and&gt;
								&lt;const value="true"/&gt;
								&lt;const value="true"/&gt;
								&lt;const value="false"/&gt;
							&lt;/and&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|compare</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Compares values and returns true or false based on the comparison. Takes 2 or 3 sub nodes.</p>
                        <p>NOTE: Since this language is written in XML, we must use XML entities to escape the five special characters in attribute or body text. If a special character is used in the text of an attribute the XML parser will fail to parse the script correctly.</p>
                        <ul>
                            <li>" &amp;quot;</li>
                            <li>' &amp;apos;</li>
                            <li>&lt; &amp;lt;</li>
                            <li>&gt; &amp;gt;</li>
                            <li>&amp; &amp;amp;</li>
                        </ul>
                        <p>Whenever you want to use one of the above characters, use the escaped version instead.</p>
                        <p>It is preferred to use isnullorwhitespace instead of compare to determine if checkboxes are selected. By using isnullorwhitespace, the rule will still work properly even if the export value changes.</p>
                        <p><b class="DRNumberBold">About:</b>
                        </p>
                        <p>Attributes: </p>
                        <ul>
                            <li>
                                <p>op: (Required) What operator to use to compare the subnodes.</p>
                                <ul>
                                    <li>
                                        <p>Possible Values: </p>
                                        <ul>
                                            <li>== (compare)</li>
                                            <li>!= (not equal)</li>
                                            <li>&amp;lt;= (less than equal to)</li>
                                            <li>&amp;gt;= (greater than equal to)</li>
                                            <li>&amp;lt; (less than)</li>
                                            <li>&amp;gt; (greater than)</li>
                                        </ul>
                                    </li>
                                </ul>
                            </li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes: </p>
                        <ul>
                            <li>One to three nodes. Use the type attribute when getting values to ensure that a string is not accidentally compared to a number. This may lead to weird behavior.</li>
                        </ul>
                        <p>Returns: </p>
                        <ul>
                            <li>A boolean</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>compare</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns true since 3 is greater than 2 and 2 is greater than 1 --&gt;
										&lt;compare op="&amp;gt;"&gt;
										&lt;const value="3"/&gt;
										&lt;const value="2"/&gt;
										&lt;const value="1"/&gt;
									&lt;/compare&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>compare</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns false since 3 is not less than or equal to 2 --&gt;
										&lt;compare op="&amp;lt;="&gt;
										&lt;const value="3"/&gt;
										&lt;const value="2"/&gt;
									&lt;/compare&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|condition</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>The node that must be present in a 'while' or 'if' block for the root conditional.</p>
                        <p>Implements 'and' behavior for sub-nodes. </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>For example: </MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>condition</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">The following two condition tags are equivalent:
										&lt;!-- Condition Tag 1 --&gt;
										&lt;condition&gt;
										&lt;and&gt;
										&lt;not&gt;
										&lt;isnullorwhitepace&gt;
										&lt;diget dataitemid="Feature_ChildRider" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;compare op="&amp;gt;"&gt;
										&lt;diget dataitemid="ChildRider_Numbers" type="Int32" failvalue="0" /&gt;
										&lt;const value="0" /&gt;
										&lt;/compare&gt;
										&lt;/and&gt;
										&lt;/condition&gt;
										&lt;!-- Condition Tag 2 --&gt;
										&lt;condition&gt;
										&lt;not&gt;
										&lt;isnullorwhitepace&gt;
										&lt;diget dataitemid="Feature_ChildRider" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;compare op="&amp;gt;"&gt;
										&lt;diget dataitemid="ChildRider_Numbers" type="Int32" failvalue="0" /&gt;
										&lt;const value="0" /&gt;
										&lt;/compare&gt;
									&lt;/condition&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes: </p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes: </p>
                        <ul>
                            <li>A list of subnodes that return booleans</li>
                        </ul>
                        <p>Returns: </p>
                        <ul>
                            <li>A boolean</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>condition</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;if &gt;
										&lt;!-- (optional) nodes to run to run before the condition is tested. --&gt;
										&lt;condition &gt;
										&lt;!-- one or more nodes that return a boolean to test. If more than one, this will
										add the nodes --&gt;
										&lt;/condition &gt;
										&lt;!-- nodes to run if condition is true. --&gt;
										&lt;else /&gt; &lt;!-- the else is optional --&gt;
										&lt;!-- nodes to run if condition is false. --&gt;
									&lt;/if &gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>condition</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- The following checks to see if the Insured is a Juvenile --&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;and&gt;
										&lt;or&gt;
										&lt;and&gt;
										&lt;compare op="&amp;lt;"&gt;
										&lt;diget dataitemid="Insured_Age" type="Int32" failvalue="0" /&gt;
										&lt;const value="18" type="Int32" /&gt;
										&lt;/compare&gt;
										&lt;not&gt;
										&lt;compare op="=="&gt;
										&lt;diget dataitemid="FLI_ISSUED_STATE_ABBREV" /&gt;
										&lt;const value="NC" type="String" /&gt;
										&lt;/compare&gt;
										&lt;/not&gt;
										&lt;/and&gt;
										&lt;and&gt;
										&lt;compare op="&amp;lt;="&gt;
										&lt;diget dataitemid="Insured_Age" type="Int32" failvalue="0" /&gt;
										&lt;const value="15" type="Int32" /&gt;
										&lt;/compare&gt;
										&lt;compare op="=="&gt;
										&lt;diget dataitemid="FLI_ISSUED_STATE_ABBREV" /&gt;
										&lt;const value="NC" type="String" /&gt;
										&lt;/compare&gt;
										&lt;/and&gt;
										&lt;/or&gt;
										&lt;/and&gt;
										&lt;/condition&gt;
										&lt;diset dataitemid="Insured_isJuvenile"&gt;
										&lt;const value="Yes" /&gt;
										&lt;/diset&gt;
										&lt;else /&gt;
										&lt;diset dataitemid="Insured_isJuvenile"&gt;
										&lt;const value="No" /&gt;
										&lt;/diset&gt;
									&lt;/if&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|elseif</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Used to write if-elseif-else statements. If the &lt;condition&gt; in an &lt;if&gt; statement is false then the remaining &lt;elseif&gt; statements is tested until a true &lt;elseif&gt; is found.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                            <li>
                                <p>Accepted subnodes: </p>
                                <ul style="list-style-type: circle;">
                                    <li>One or more booleans. If one than one node is present then it will implement &lt;and&gt; behavior like the &lt;condition&gt; tag.</li>
                                </ul>
                            </li>
                            <li>
                                <p>Returns</p>
                                <ul style="list-style-type: circle;">
                                    <li>None</li>
                                </ul>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>elseif</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;if &gt;
										&lt;!--(optional) nodes to run before the condition is tested. --&gt;
										&lt;condition &gt;
										&lt;!-- one or more nodes that return a boolean to test. If more than one, this 
										will add the nodes --&gt;
										&lt;/condition &gt;
										&lt;!-- nodes to run if condition is true. --&gt;
										&lt;elseif&gt; &lt;!-- elseif(s) are optional --&gt;
										&lt;!-- condition to check if the condition is false --&gt;
										&lt;/elseif&gt;
										&lt;!-- Code to run if the elseif condition is true --&gt;
										&lt;else /&gt; &lt;!-- the else is optional --&gt;
										&lt;!-- nodes to run if condition is false. --&gt;
									&lt;/if &gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>elseif</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Checks to see if the Joint Owner last name is blank or has less than 2 characters --&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="JointOwner_LastName" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/condition&gt;
										&lt;postmessage dataitemid="JointOwner_LastName"&gt;
										&lt;const value="Joint owner last name is a required field." /&gt;
										&lt;/postmessage&gt;
										&lt;elseif&gt;
										&lt;and&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="JointOwner_LastName" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;not&gt;
										&lt;ismatch regex="^[\w]{2,}"&gt;
										&lt;diget dataitemid="JointOwner_LastName" /&gt;
										&lt;/ismatch&gt;
										&lt;/not&gt;
										&lt;/and&gt;
										&lt;/elseif&gt;
										&lt;postmessage dataitemid="JointOwner_LastName"&gt;
										&lt;const value="Joint owner last name should be minimum 2 characters." /&gt;
										&lt;/postmessage&gt;
										&lt;else /&gt;
										&lt;removemessage dataitemid="JointOwner_LastName" /&gt;
									&lt;/if&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <MadCap:pageBreak />
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|isnull</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Returns true if the subnode is null.</p>
                        <p>
                            <MadCap:snippetText src="../../Resources/Snippets/Rules/RulesIsNull.flsnp" />
                        </p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes: </p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes: </p>
                        <ul>
                            <li>A single node that may or may not be null</li>
                        </ul>
                        <p>Returns: </p>
                        <ul>
                            <li>A boolean</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>isnull</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns true or false --&gt;
										&lt;isnull &gt;
										&lt;get name="value"/&gt;
									&lt;/isnull&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>isnull</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Calculates the age of the Insured in years--&gt;
										&lt;block&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;not&gt;
										&lt;isnull&gt;
										&lt;diget dataitemid="Insured_DOB" type="DateTime" /&gt;
										&lt;/isnull&gt;
										&lt;/not&gt;
										&lt;/condition&gt;
										&lt;set name="age"&gt;
										&lt;datetimedifference option="Year"&gt;
										&lt;datetimenow /&gt;
										&lt;diget dataitemid="Insured_DOB" type="DateTime" /&gt;
										&lt;/datetimedifference&gt;
										&lt;/set&gt;
										&lt;diset dataitemid="Insured_Age"&gt;
										&lt;get name="age" /&gt;
										&lt;/diset&gt;
										&lt;else /&gt;
										&lt;diset dataitemid="Insured_Age"&gt;
										&lt;const value="" /&gt;
										&lt;/diset&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|isnullorwhitespace</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Returns true if the subnode is null or contains just white space characters. Tabs, spaces, and newlines are examples of whitespace characters.</p>
                        <p>It is preferred to use isnullorwhitespace instead of compare to determine if checkboxes are selected. By using isnullorwhitespace, the rule will still work properly even if the export value changes.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes: </p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes: </p>
                        <ul>
                            <li>A single node that may or may not be null.</li>
                        </ul>
                        <p>Returns: </p>
                        <ul>
                            <li>A boolean</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>isnullorwhitespace</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns the value is null or whitespace --&gt;
										&lt;isnullorwhitespace &gt;
										&lt;get name="value"/&gt;
									&lt;/isnullorwhitespace&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>isnullorwhitespace</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;block&gt;
										&lt;set name="message"&gt;
										&lt;const value="NONE" /&gt;
										&lt;/set&gt;
										&lt;set name="postmessage"&gt;
										&lt;const value="false" /&gt;
										&lt;/set&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="Insured_Citizen_NonUS_Country" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/condition&gt;
										&lt;set name="postmessage"&gt;
										&lt;const value="true" /&gt;
										&lt;/set&gt;
										&lt;set name="message"&gt;
										&lt;const value="Citizen Non US Country is a required field" /&gt;
										&lt;/set&gt;
										&lt;/if&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;get name="postmessage" /&gt;
										&lt;/condition&gt;
										&lt;postmessage dataitemid="Insured_Citizen_NonUS_Country"&gt;
										&lt;get name="message" /&gt;
										&lt;/postmessage&gt;
										&lt;else /&gt;
										&lt;removemessage dataitemid="Insured_Citizen_NonUS_Country" /&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|listcontains</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Searches a list for a given value. Returns true if the value is in the list, false otherwise.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes: </p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes: </p>
                        <ol>
                            <li>The first subnode must be a list.</li>
                            <li>The second subnode must be the element to search the list for.</li>
                        </ol>
                        <p>Returns: </p>
                        <ul>
                            <li>A boolean</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>listcontains</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Will return true if 3 is in someList --&gt;
								&lt;listcontains&gt;
								&lt;get name="someList"/&gt;
								&lt;const value="3"/&gt;
							&lt;/listcontains&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|not</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>The negation operator. Inverts the Boolean result of the subnode and returns it.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes: </p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes: </p>
                        <ul>
                            <li>A single subnode that returns a boolean</li>
                        </ul>
                        <p>Returns: </p>
                        <ul>
                            <li>A boolean</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>not</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- this would return false --&gt;
										&lt;not&gt;
										&lt;const value="true"/&gt;
									&lt;/not&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>not</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Enables a field if a checkbox is selected --&gt;
										&lt;block&gt;
										&lt;set name="condition"&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="Conversion_Type_TotalRider" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;/set&gt;
										&lt;setcontrolstate dataitemid="Conversion_Type_TotalRider_Description" 
										clearondisable="true"&gt;
										&lt;get name="condition" /&gt;
										&lt;/setcontrolstate&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|or</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Applies the OR operator to the sub-nodes together and returns the result.</p>
                        <table style="margin-left: 0;margin-right: auto;">
                            <caption class="Table">Truth Table</caption>
                            <col />
                            <col />
                            <col />
                            <thead>
                                <tr>
                                    <th>One</th>
                                    <th>Two</th>
                                    <th><b>OR(One,Two)</b>
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>True</td>
                                    <td>True</td>
                                    <td>True</td>
                                </tr>
                                <tr>
                                    <td>True</td>
                                    <td>False</td>
                                    <td>True</td>
                                </tr>
                                <tr>
                                    <td>False</td>
                                    <td>True</td>
                                    <td>True</td>
                                </tr>
                                <tr>
                                    <td>False</td>
                                    <td>False</td>
                                    <td>False</td>
                                </tr>
                            </tbody>
                        </table>
                        <p>Bizarro world: If the first-child subnode of an or node is &lt;compare op="!="&gt; then the or will behave like an and node. See the entry on &lt;and&gt; for more information.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes: </p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes: </p>
                        <ul>
                            <li>A list of 1 to n nodes than return boolean values</li>
                        </ul>
                        <p>Returns: </p>
                        <ul>
                            <li>A boolean</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>or</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- this would return true since one value is true --&gt;
										&lt;or&gt;
										&lt;const value="false"/&gt;
										&lt;const value="true"/&gt;
										&lt;const value="false"/&gt;
									&lt;/or&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>or</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Sets a field based on if the Insured is the Applicant's son or daughter --&gt;
										&lt;block&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;or&gt;
										&lt;compare op="=="&gt;
										&lt;diget dataitemid="Insured_Relationship_Applicant" /&gt;
										&lt;const value="Son" /&gt;
										&lt;/compare&gt;
										&lt;compare op="=="&gt;
										&lt;diget dataitemid="Insured_Relationship_Applicant" /&gt;
										&lt;const value="Daughter" /&gt;
										&lt;/compare&gt;
										&lt;/or&gt;
										&lt;/condition&gt;
										&lt;diset dataitemid="Insured_isOffspring"&gt;
										&lt;const value="Yes" /&gt;
										&lt;/diset&gt;
										&lt;else /&gt;
										&lt;diset dataitemid="Insured_isOffspring"&gt;
										&lt;const value="No" /&gt;
										&lt;/diset&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|xor</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Applies the OR operator to the sub-nodes together and returns the result.</p>
                        <table style="margin-left: 0;margin-right: auto;caption-side: top;">
                            <caption class="Table">Truth Table </caption>
                            <col />
                            <col />
                            <col />
                            <thead>
                                <tr>
                                    <th>One</th>
                                    <th>Two </th>
                                    <th>XOR(One,Two)</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>True</td>
                                    <td>True</td>
                                    <td>True</td>
                                </tr>
                                <tr>
                                    <td>True</td>
                                    <td>False</td>
                                    <td>True</td>
                                </tr>
                                <tr>
                                    <td>False</td>
                                    <td>True</td>
                                    <td>True</td>
                                </tr>
                                <tr>
                                    <td>False</td>
                                    <td>False</td>
                                    <td>False</td>
                                </tr>
                            </tbody>
                        </table>
                        <p>If there are more than two subnodes then &lt;xor&gt; returns true, if and only if, only one of the nodes is true.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes: </p>
                        <ul>
                            <li>A list of 1 to n nodes than return boolean values</li>
                        </ul>
                        <p>Returns: </p>
                        <ul>
                            <li>A boolean</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>xor</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- this would return true since the values are exclusively true for an or --&gt;
										&lt;xor&gt;
										&lt;const value="true"/&gt;
										&lt;const value="false"/&gt;
									&lt;/xor&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>xor</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Only one of these two fields must be filled out --&gt;
										&lt;block&gt;
										&lt;set name="message"&gt;
										&lt;const value="Check/Money Order and One Time EFT must be completed and are mutually exclusive." /&gt;
										&lt;/set&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;xor&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="Source_Of_Funds_CheckMoneyOrder" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="Source_Of_Funds_OneTimeEFT" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;/xor&gt;
										&lt;/condition&gt;
										&lt;postmessage dataitemid="Source_Of_Funds_CheckMoneyOrder"&gt;
										&lt;get name="message" /&gt;
										&lt;/postmessage&gt;
										&lt;postmessage dataitemid="Source_Of_Funds_OneTimeEFT"&gt;
										&lt;get name="message" /&gt;
										&lt;/postmessage&gt;
										&lt;else /&gt;
										&lt;removemessage dataitemid="Source_Of_Funds_CheckMoneyOrder" /&gt;
										&lt;removemessage dataitemid="Source_Of_Funds_OneTimeEFT" /&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <p MadCap:conditions="General.Online"><a href="#top" alt="Return to Top">Return to Top</a>
                        </p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p MadCap:conditions="General.PDF">&#160;</p>
        <h2 MadCap:conditions="General.PDF"><a name="Control"></a>|Control</h2>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:conditionalText MadCap:conditions="General.Online">
                    <MadCap:dropDownHotspot><a name="ControlOnline"></a>|Control</MadCap:dropDownHotspot>
                </MadCap:conditionalText>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|block</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Executes the nodes inside on a higher level of stack; can return a value. The &lt;block&gt; tag is roughly equivalent to {...} in C-style syntax languages.</p>
                        <p>All XML documents must have a single root node. In cases where there is not one single top level node, a &lt;block&gt;...&lt;/block&gt; can wrap the other nodes thereby providing a root node.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes: </p>
                        <ul>
                            <li>result: (Optional) The variable name this node will return. Set the result attribute to the name of a variable declared inside the &lt;block&gt; with &lt;set&gt;. The &lt;block&gt; will then return the value of the variable.</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes: </p>
                        <ul>
                            <li>Any/All subnodes are acceptable</li>
                        </ul>
                        <p>Returns: </p>
                        <ul>
                            <li>If the result attribute is used then it will return the result variable, otherwise this tag returns None.</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>block</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- This block statement will return a result --&gt;
										&lt;block result="name"&gt;
										&lt;set name="name"&gt;
										&lt;const value="value to be returned by the block"/&gt;
										&lt;/set&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>block</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- This block statement wraps the three diset rules together, providing a root node --&gt;
										&lt;block&gt;
										&lt;diset dataitemid="Parent_LastName"&gt;
										&lt;diget dataitemid="Owner_LastName" /&gt;
										&lt;/diset&gt;
										&lt;diset dataitemid="Parent_FirstName"&gt;
										&lt;diget dataitemid="Owner_FirstName" /&gt;
										&lt;/diset&gt;
										&lt;diset dataitemid="Parent_MiddleName"&gt;
										&lt;diget dataitemid="Owner_MiddleName" /&gt;
										&lt;/diset&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|call</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Calls a function previously defined with the Function node.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes: </p>
                        <ul>
                            <li>name: (Required) the name of the function to call</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes: </p>
                        <ul>
                            <li>The parameters into the function in order</li>
                        </ul>
                        <p>Returns: </p>
                        <ul>
                            <li>The result of the function</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>call</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;function name="add" params="Int32 x, Int32 y" result="result"&gt;
								&lt;set name="result"&gt;
								&lt;math op="+"&gt;
								&lt;get name="x"/&gt;
								&lt;get name="y"/&gt;
								&lt;/math&gt;
								&lt;/set&gt;
								&lt;/set&gt;
								&lt;call name="add"&gt;
								&lt;const value="4"/&gt;
								&lt;const value="4"/&gt;
							&lt;/call&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|callasyncaction</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p><a name="|callasyncaction"></a>Will initiate the named async (long-term) action.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: the name of the action to initiate</li>
                            <li>frequency: the frequency (in minutes) that this action should try to finish, minimum is 5 minutes</li>
                            <li>expires: how long to wait (in minutes) before the action is expired</li>
                            <li>send notification: whether or not to notify user when process is complete</li>
                            <li MadCap:conditions="General.Postpone">save: whether or not to save (true, false)</li>
                            <li>message: message to send to user when processing is complete, can be overridden by Provider</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <p>&lt;!-- Will initiate the named async (long-term) action to be conducted by the provider until it is done – returns a boolean, indicating if it succeeded in initiating the async action or not --&gt;</p>
                        <p>&lt;callasyncaction name='nameOfAction' frequency='frequencyToOccurInMinutes' expires='expiresInMinutes' sendnotification='true' message='Processing is complete' /&gt;</p>
                        <p MadCap:conditions="General.Postpone">&#160;</p>
                        <p MadCap:conditions="General.Postpone">&lt;if&gt; &lt;condition&gt; &lt;compare op="=="&gt; &lt;diget dataitemid="Proceed_to_Decision_Page_Acknowledgement" /&gt; &lt;const value="Yes" /&gt; &lt;/compare&gt; &lt;/condition&gt; &lt;callasyncaction name="UnderWritingAccel" frequency="90" expires="15" sendnotification="false" save="true" message="UW Decisioning Initiated" /&gt; &lt;/if&gt;</p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|callexternal</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Call an External Provider specific to the organization. Contact Hexure for more information.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: (Required) the name of the external method to call</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>The result of the external call</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <p>&lt;callexternal name="nameofthing" /&gt;</p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <MadCap:pageBreak />
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|case</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>The case for a switch statement. Must be contained within a &lt;switch&gt;.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>Any/all nodes. The nodes to run when this case is activated.</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>case</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;switch result=""&gt;
										&lt;get value="switchValue"/&gt;
										&lt;case value="5" &gt;
										&lt;!-- Code that will run if switchValue equals 5 --&gt;
										&lt;/case&gt;
										&lt;default&gt;
										&lt;!-- Code that will run in the event no case statement is activated --&gt;
										&lt;/default&gt;
									&lt;/switch&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>case</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Triggers a form copy based on the sum of two dropdown boxes --&gt;
										&lt;block&gt;
										&lt;set name="count"&gt;
										&lt;math op="+"&gt;
										&lt;diget dataitemid="Source_Of_Funds_ExternalRothIRA_Forms" type="Int32" failvalue="0" /&gt;
										&lt;diget dataitemid="Source_Of_Funds_InternalRothIRA_Forms" type="Int32" failvalue="0" /&gt;
										&lt;/math&gt;
										&lt;/set&gt;
										&lt;switch&gt;
										&lt;get name="count"/&gt;
										&lt;case value="1"  &gt;&lt;setformstate name="600D DOI" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="2"  &gt;&lt;setformstate name="600D DOI2" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="3"  &gt;&lt;setformstate name="600D DOI3" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="4"  &gt;&lt;setformstate name="600D DOI4" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="5"  &gt;&lt;setformstate name="600D DOI5" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="6"  &gt;&lt;setformstate name="600D DOI6" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="7"  &gt;&lt;setformstate name="600D DOI7" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="8"  &gt;&lt;setformstate name="600D DOI8" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="9"  &gt;&lt;setformstate name="600D DOI9" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="10" &gt;&lt;setformstate name="600D DOI10" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;/switch&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|catch</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>The catch in a try-catch statement. Contains nodes that handle the exception.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>type: (Optional) The assembly qualified type of the exception to handle, or empty for all types.</p>
                            </li>
                            <li>
                                <p>name: (Optional)The stack variable name for the Exception.</p>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node.</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>Any/all nodes. The nodes to run when the exception is caught.</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>catch</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;try&gt;
								&lt;!-- do something dangerous! --&gt;
								&lt;catch name="ex" &gt;
								&lt;!-- handle the fallout --&gt;
								&lt;/catch&gt;
								&lt;catch type="System.ArgumentNullException" name="ex" &gt;
								&lt;!-- handle the fallout of the type: System.ArgumentNullException --&gt;
								&lt;/catch&gt;
								&lt;finally&gt;
								&lt;!-- always run after the dangerous action (Optional) --&gt;
								&lt;/finally&gt;
							&lt;/try&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead><a name="clickcustomaction"></a>
                        <MadCap:dropDownHotspot>|clickcustomaction</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Fires a click event of a custom button for SomeButtonID. The custom action takes place according to the properties set for the custom action in the Button (form designer) control or Custom Action (wizard designer) control in Admin. For example, if a button is intended to show a custom list, it will pop up a custom list dialog. </p>
                        <p>A custom action call is able to occur on any form or wizard that is within the same package and can be kicked off via rules on any page. If the custom action button is not on the same form or wizard as the rule that kicks off the call, then FireLight will look for the name of that call and will run the first instance of this.</p>
                        <p>The call can only occur when a custom action button is enabled. If the button is disabled, the call cannot occur. Additionally, a call can only occur on a single activity, meaning that the call can't occur from a presale when the custom action button is in an application.</p>
                        <p>This functionality is available in both a forms or wizards and can be triggered from either.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>dataitemid: The data item ID.</p>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node.</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>clickcustomaction</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Force a button click on application creation using the &lt;isnewapp/&gt; node. --&gt;
								&lt;if&gt;
								&lt;condition&gt;
								&lt;compare op="=="&gt;
								&lt;isnewapp /&gt;
								&lt;const value="true" /&gt;
								&lt;/compare&gt;
								&lt;/condition&gt;
								&lt;clickcustomaction dataitemid="SomeButtonID" /&gt;
							&lt;/if&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|conditional</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Must contain 3 nodes. The first must return a Boolean and if that is true, then the second node is executed and its result returned; otherwise the third node is executed &amp; returned.</p>
                        <p>The &lt;conditional&gt; tag is equivalent to the ternary operator (i.e., Object bar = foo.isSelected() ? foo : baz;) in other languages.</p>
                        <p>Not to be confused with &lt;condition&gt; which is used in if-statements and while-loops.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>comment: (Optional) a description of this node.</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>Must contains three subnodes: </p>
                                <ol>
                                    <li>The first must return a boolean.</li>
                                    <li>The second subnode contains the code to run if the first subnode is true.</li>
                                    <li>The third subnode contains the code to run if the first subnode is false.</li>
                                </ol>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>Either the value of the second or third subnodes.</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>conditional</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;conditional&gt;
								&lt;const value="true"/&gt;
								&lt;const value="returned on true"/&gt;
								&lt;const value="returned on false"/&gt;
							&lt;/conditional&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|default</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>The default Case for a switch statement.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>comment: (Optional) a description of this node.</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>Any/all nodes. The nodes to run when no other case is activated.</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>default</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;switch&gt;
								&lt;get value="switchValue"/&gt;
								&lt;case value="5" &gt;
								&lt;!-- Code that will run if switchValue equals 5 --&gt;
								&lt;/case&gt;
								&lt;default&gt;
								&lt;!-- Code that will run in the event no case statement is activated --&gt;
								&lt;/default&gt;
							&lt;/switch&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|do</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>This declares the start of the looping part of a while loop. Anything before it is ran just once. This allows variables to be declared before the &lt;while&gt; loop starts running.</p>
                        <p>This tag allows similar behavior to "Do While" loops in other languages.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>comment: (Optional) a description of this node.</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>None (must be self-closed).</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>do</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;while&gt;
								&lt;!-- code before a 'do' will run regardless of the condition but will not loop --&gt;
								&lt;do/&gt;
								&lt;!--code after the 'do' (if there is no do, then its all code before the condition) will run before the condition is evaluated --&gt;
								&lt;condition &gt;
								&lt;!-- one or more nodes that return a boolean to test. If more than one, this will add the nodes --&gt;
								&lt;/condition &gt;
								&lt;!-- if condition returns true, then all code after the condition will run and then execution will start at the do node or the start of the while node again. --&gt;
							&lt;/while&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|else</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>The optional node that denotes where the 'then' part of an if ends and the 'else' part begins. Everything after the &lt;else/&gt; is evaluated if the If-statement condition evaluates to false.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>None (Must be self-closed)</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>else</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;if &gt;
										&lt;!--(optional) nodes to run to run before the condition is tested. --&gt;
										&lt;condition &gt;
										&lt;!-- one or more nodes that return a boolean to test. If more than one, this will add the nodes --&gt;
										&lt;/condition &gt;
										&lt;!-- nodes to run if condition is true. --&gt;
										&lt;else /&gt; &lt;!-- the else is optional --&gt;
										&lt;!-- nodes to run if condition is false. --&gt;
									&lt;/if &gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>else</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;block&gt;
										&lt;set name="condition"&gt;
										&lt;and&gt; &lt;!-- Beware: This "and" will turn into an "or" if the child compare has op="!=" --&gt;
										&lt;compare op="=="&gt;
										&lt;diget dataitemid="Owner_ApplicantOrAnnuitant" /&gt;
										&lt;const value="Other" type="String" /&gt;
										&lt;/compare&gt;
										&lt;/and&gt;
										&lt;/set&gt;
										&lt;set name="message"&gt;
										&lt;const value="All Owner fields are required." /&gt;
										&lt;/set&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;get name="condition" /&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="CoverPageOwner_LastName" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/condition&gt;
										&lt;postmessage dataitemid="CoverPageOwner_LastName"&gt;
										&lt;get name="message" /&gt;
										&lt;/postmessage&gt;
										&lt;else /&gt;
										&lt;removemessage dataitemid="CoverPageOwner_LastName" /&gt;
										&lt;/if&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;get name="condition" /&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="CoverPageOwner_FirstName" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/condition&gt;
										&lt;postmessage dataitemid="CoverPageOwner_FirstName"&gt;
										&lt;get name="message" /&gt;
										&lt;/postmessage&gt;
										&lt;else /&gt;
										&lt;removemessage dataitemid="CoverPageOwner_FirstName" /&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|finally</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Finally is used to guarantee a block of code executes regardless of whether an exception is thrown and caught.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>Any/all code to run whenever exiting the try statement</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>finally</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;try&gt;
								&lt;!-- do something dangerous! --&gt;
								&lt;catch name="ex" &gt;
								&lt;!-- handle the fallout --&gt;
								&lt;/catch&gt;
								&lt;catch type="System.ArgumentNullException" name="ex" &gt;
								&lt;!-- handle the fallout of the type: System.ArgumentNullException --&gt;
								&lt;/catch&gt;
								&lt;finally&gt;
								&lt;!-- always run after the dangerous action (Optional) --&gt;
								&lt;/finally&gt;
							&lt;/try&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot><a name="foreach"></a>|foreach</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Iterates over a list. Given a list, the code within a &lt;foreach&gt; loop will run once for each item in the list. Each individual item in the list can be accessed within the loop by using the "name" attribute.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>name: (Required) Name of the variable to store the list's Item</p>
                            </li>
                            <li>
                                <p>result: (Optional) The variable name this node will return</p>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>Any/All code to run once for each item in the list</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>foreach</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- sums up all the values in somelist --&gt;
										&lt;set name="sum"&gt;
										&lt;const value="0"/&gt;
										&lt;/set&gt;
										&lt;foreach name="item"&gt;
										&lt;get name="somelist"/&gt;
										&lt;set name="sum"&gt;
										&lt;math op="+"&gt;
										&lt;get name="item"/&gt;
										&lt;get name="sum"/&gt;
										&lt;/math&gt;
										&lt;/set&gt;
									&lt;/foreach&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>foreach</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Determines how many overflow forms are activated and then sets Overflow_Count
										with the number of active overflow forms --&gt;
										&lt;block&gt;
										&lt;set name="counter"&gt;
										&lt;const value="0" /&gt;
										&lt;/set&gt;
										&lt;set name="list"&gt;
										&lt;list&gt;
										&lt;getformstate name="ICC12 105419" /&gt;
										&lt;getformstate name="ICC12 1054192" /&gt;
										&lt;getformstate name="ICC12 1054193" /&gt;
										&lt;getformstate name="ICC12 1054194" /&gt;
										&lt;getformstate name="ICC12 1054195" /&gt;
										&lt;getformstate name="ICC12 1054196" /&gt;
										&lt;getformstate name="ICC12 1054197" /&gt;
										&lt;getformstate name="ICC12 1054198" /&gt;
										&lt;getformstate name="ICC12 1054199" /&gt;
										&lt;getformstate name="ICC12 10541910" /&gt;
										&lt;getformstate name="ICC12 105419-2" /&gt;
										&lt;getformstate name="ICC12 105419-22" /&gt;
										&lt;getformstate name="ICC12 105419-23" /&gt;
										&lt;getformstate name="ICC12 105419-24" /&gt;
										&lt;getformstate name="ICC12 105419-25" /&gt;
										&lt;getformstate name="ICC12 105419-26" /&gt;
										&lt;getformstate name="ICC12 105419-27" /&gt;
										&lt;getformstate name="ICC12 105419-28" /&gt;
										&lt;getformstate name="ICC12 105419-29" /&gt;
										&lt;getformstate name="ICC12 105419-210" /&gt;
										&lt;getformstate name="ICC12 105419-3" /&gt;
										&lt;getformstate name="ICC12 105419-32" /&gt;
										&lt;getformstate name="ICC12 105419-33" /&gt;
										&lt;getformstate name="ICC12 105419-34" /&gt;
										&lt;getformstate name="ICC12 105419-35" /&gt;
										&lt;getformstate name="ICC12 105419-36" /&gt;
										&lt;getformstate name="ICC12 105419-37" /&gt;
										&lt;getformstate name="ICC12 105419-38" /&gt;
										&lt;getformstate name="ICC12 105419-39" /&gt;
										&lt;getformstate name="ICC12 105419-310" /&gt;
										&lt;getformstate name="ICC12 105419-4" /&gt;
										&lt;/list&gt;
										&lt;/set&gt;
										&lt;foreach name="item"&gt;
										&lt;get name="list" /&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;compare op="&amp;gt;"&gt;
										&lt;convert type="Int32"&gt;
										&lt;get name="item" /&gt;
										&lt;/convert&gt;
										&lt;const value="0" type="Int32" /&gt;
										&lt;/compare&gt;
										&lt;/condition&gt;
										&lt;set name="counter"&gt;
										&lt;math op="+"&gt;
										&lt;get name="counter" /&gt;
										&lt;const value="1" type="Int32" /&gt;
										&lt;/math&gt;
										&lt;/set&gt;
										&lt;/if&gt;
										&lt;/foreach&gt;
										&lt;diset dataitemid="Overflow_Count"&gt;
										&lt;get name="counter" /&gt;
										&lt;/diset&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|function</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>The declaration for a function: a reusable block of code that may return a value. A function can then be called with the &lt;call&gt; tag.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>name: (Required) The name of the function</p>
                            </li>
                            <li>
                                <p>params: (Optional) a comma-seperated list of parameters to the function in the format "Type name" Allowed types: </p>
                                <ul>
                                    <li>Int16</li>
                                    <li>Int32</li>
                                    <li>Int64</li>
                                    <li>Single</li>
                                    <li>Double</li>
                                    <li>DateTime</li>
                                    <li>Boolean</li>
                                    <li>Guid</li>
                                    <li>String</li>
                                </ul>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>Any/all subnodes to run as part of the function</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>None, but places a callable function in scope</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>function</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- The call tag will return 8 --&gt;
								&lt;function name="add" params="Int32 x, Int32 y" result="result"&gt;
								&lt;set name="result"&gt;
								&lt;math op="+"&gt;
								&lt;get name="x"/&gt;
								&lt;get name="y"/&gt;
								&lt;/math&gt;
								&lt;/set&gt;
								&lt;/set&gt;
								&lt;call name="add"&gt;
								&lt;const value="4"/&gt;
								&lt;const value="4"/&gt;
							&lt;/call&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|if</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Represents an if-statement or an if-else-statement.</p>
                        <p>Executes all nodes before the Condition node, and if the Condition evaluates to true, then executes all nodes between the Condition and the `else` node; otherwise it will execute all nodes after the `else` node.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>
                                <p>Any/all nodes to execute regardless.</p>
                            </li>
                            <li>
                                <p> `&lt;condition&gt;&lt;/condition&gt;` (Required) With subnodes that evaluate to a boolean value.</p>
                            </li>
                            <li>
                                <p> Any/all nodes to run if the condition is true.</p>
                            </li>
                            <li>
                                <p> `&lt;elseif&gt;&lt;/elseif&gt;` (Optional) with subnodes that evaluate to a boolean value</p>
                            </li>
                            <li>
                                <p> Any/All nodes to run if the elseif is true.</p>
                            </li>
                            <li>
                                <p> `&lt;else /&gt;` (Optional) To separate the code to run if the condition is true from the code when the condition is false.</p>
                            </li>
                            <li>
                                <p> Any/all nodes to run when the condition is false.</p>
                            </li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>if</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;if&gt;
										&lt;!-- (optional) nodes to run to run before the condition is tested. --&gt;
										&lt;condition&gt;
										&lt;!-- one or more nodes that return a boolean to test. If more than one, this 
										will add the nodes. --&gt;
										&lt;/condition&gt;
										&lt;!-- nodes to run if condition is true. --&gt;
										&lt;elseif&gt; &lt;!-- elseif(s) are optional --&gt;
										&lt;!-- condition to check if the condition is false --&gt;
										&lt;/elseif&gt;
										&lt;!-- Code to run if the elseif condition is true --&gt;
										&lt;else /&gt; &lt;!-- the else is optional --&gt;
										&lt;!-- nodes to run if condition is false. --&gt;
									&lt;/if&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>if</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Sets "EFT_Type_Of_Request_MAC" to "MAC" if "Premium_Frequency_MAC" has a value of "MAC," otherwise set 
										"EFT_Type_Of_Request_MAC" blank. --&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;compare op="=="&gt;
										&lt;diget dataitemid="Premium_Frequency_MAC" /&gt;
										&lt;const value="MAC" /&gt;
										&lt;/compare&gt;
										&lt;/condition&gt;
										&lt;diset dataitemid="EFT_Type_Of_Request_MAC"&gt;
										&lt;const value="MAC" /&gt;
										&lt;/diset&gt;
										&lt;else /&gt;
										&lt;diset dataitemid="EFT_Type_Of_Request_MAC"&gt;
										&lt;const value="" /&gt;
										&lt;/diset&gt;
									&lt;/if&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 3</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>if</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- A rule that adds an error message if "EFT_Bank_Address_State" is blank --&gt;
										&lt;block&gt;
										&lt;set name="message"&gt;
										&lt;const value="NONE" /&gt;
										&lt;/set&gt;
										&lt;set name="postmessage"&gt;
										&lt;const value="false" /&gt;
										&lt;/set&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="EFT_Bank_Address_State" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/condition&gt;
										&lt;set name="postmessage"&gt;
										&lt;const value="true" /&gt;
										&lt;/set&gt;
										&lt;set name="message"&gt;
										&lt;const value="EFT state is required field" /&gt;
										&lt;/set&gt;
										&lt;/if&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;get name="postmessage" /&gt;
										&lt;/condition&gt;
										&lt;postmessage dataitemid="EFT_Bank_Address_State"&gt;
										&lt;get name="message" /&gt;
										&lt;/postmessage&gt;
										&lt;else /&gt;
										&lt;removemessage dataitemid="EFT_Bank_Address_State" /&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|select</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Allows selection and transformation of data in a list.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>name: Name of the variable to store the list's Item</p>
                            </li>
                            <li>comment (optional): a description of this node</li>
                        </ul>
                        <p><b class="DRNumberBold">Example:</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>select</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns a list of the same size where all items are less or equal to 5 --&gt;
								&lt;select name="x"&gt;
								&lt;get name = "List of Integers" /&gt;
								&lt; max &gt;
								&lt;const value= "5" /&gt;
								&lt; get name="x"/&gt;
								&lt;/max&gt;
							&lt;/select&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|switch</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>A switch statement.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>result: (Optional) The variable name this node will return. Set the result attribute to the name of a variable declared inside the switch statement with &lt;set&gt;. &lt;switch&gt; will then return the value of the variable.</p>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node.</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>
                                <p>The first subnode must be the value the switch statement switches on. If any of the case statements have the same value as the first subnode then all of the code within that switch statement will run.</p>
                            </li>
                            <li>
                                <p>Each switch statement should have a couple of &lt;case value=.."."&gt;...&lt;/case&gt; subnodes.</p>
                            </li>
                            <li>
                                <p>If you want some code to run if no &lt;case&gt; node has the same value, then use a &lt;default&gt;..&lt;default&gt; node as the last subnode.</p>
                            </li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>If the result attribute is used, then it will return the result variable, otherwise it returns None.</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>switch</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;switch&gt;
										&lt;get value="switchValue"/&gt;
										&lt;case value="5" &gt;
										&lt;!-- Code that will run if switchValue equals 5 --&gt;
										&lt;/case&gt;
										&lt;default&gt;
										&lt;!-- Code that will run in the event no case statement is activated --&gt;
										&lt;/default&gt;
									&lt;/switch&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>switch</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Triggers a form copy based on the sum of two dropdown boxes --&gt;
										&lt;block&gt;
										&lt;set name="count"&gt;
										&lt;math op="+"&gt;
										&lt;diget dataitemid="Source_Of_Funds_ExternalRothIRA_Forms" type="Int32" failvalue="0" /&gt;
										&lt;diget dataitemid="Source_Of_Funds_InternalRothIRA_Forms" type="Int32" failvalue="0" /&gt;
										&lt;/math&gt;
										&lt;/set&gt;
										&lt;switch&gt;
										&lt;get name="count"/&gt;
										&lt;case value="1"  &gt;&lt;setformstate name="600D DOI" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="2"  &gt;&lt;setformstate name="600D DOI2" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="3"  &gt;&lt;setformstate name="600D DOI3" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="4"  &gt;&lt;setformstate name="600D DOI4" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="5"  &gt;&lt;setformstate name="600D DOI5" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="6"  &gt;&lt;setformstate name="600D DOI6" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="7"  &gt;&lt;setformstate name="600D DOI7" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="8"  &gt;&lt;setformstate name="600D DOI8" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="9"  &gt;&lt;setformstate name="600D DOI9" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;case value="10" &gt;&lt;setformstate name="600D DOI10" &gt;&lt;const value="true"/&gt;&lt;/setformstate&gt;&lt;/case&gt;
										&lt;/switch&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|try</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Do or do not, but there is a try statement. The Try node contains the guarded code that may cause the exception. The Catch blocks are used to catch specific exception types. The optional Finally node is always executed, regardless of whether an exception is thrown. The block is executed until an exception is thrown.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>comment: (Optional) a description of this node.</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>
                                <p>Any/all code to run that may or may not throw an exception.</p>
                            </li>
                            <li>
                                <p>One or more &lt;catch&gt; nodes that handle the thrown exception.</p>
                            </li>
                            <li>
                                <p>One &lt;finally&gt; (Optional) tag that always run when exiting the &lt;try&gt;.</p>
                            </li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>try</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;try&gt;
								&lt;!-- do something dangerous! --&gt;
								&lt;catch name="ex" &gt;
								&lt;!-- handle the fallout --&gt;
								&lt;/catch&gt;
								&lt;catch type="System.ArgumentNullException" name="ex" &gt;
								&lt;!-- handle the fallout of the type: System.ArgumentNullException --&gt;
								&lt;/catch&gt;
								&lt;finally&gt;
								&lt;!-- always run after the dangerous action (Optional) --&gt;
								&lt;/finally&gt;
							&lt;/try&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|where</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Reduces a list based on the condition, First node is the list to be reduced and its value is put and a item specified by name. Second node must return a boolean.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>name: Name of the variable to store the list's Item</p>
                            </li>
                            <li>comment (optional): a description of this node</li>
                        </ul>
                        <p><b class="DRNumberBold">Example:</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>where</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns a potentially smaller list that only has numbers greater than 5 --&gt;
								&lt;where name="x"&gt;
								&lt;get name = "List of Integers" /&gt;
								&lt; compare op="&amp;gt;" &gt;
								&lt;get name = "x" /&gt;
								&lt;const value= "5" /&gt;
								&lt;/ compare &gt;
							&lt;/ where &gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|while</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Implements a while loop. Runs the subnodes until the condition returns false.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>result: (Optional) The variable name this node will return.</p>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node.</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>
                                <p>Any/all code to run, but will not loop.</p>
                            </li>
                            <li>
                                <p>&lt;do/&gt; (Optional) separates the start of the looping from the code above, which will not loop.</p>
                            </li>
                            <li>
                                <p>Any/all code to run in the loop before the condition is evaluated.</p>
                            </li>
                            <li>
                                <p>&lt;condition&gt; (Required) That contains the test to determine if the coop should continue looping</p>
                            </li>
                            <li>
                                <p>Any/all code to run in the loop.</p>
                            </li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>while</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;while&gt;
								&lt;!-- code before a 'do' will run regardless of the condition but will not loop --&gt;
								&lt;do/&gt;
								&lt;!--code after the 'do' (if there is no do, then its all code before the condition) 
								will run before the condition is evaluated --&gt;
								&lt;condition &gt;
								&lt;!-- one or more nodes that return a boolean to test. If more than one, this 
								will add the nodes --&gt;
								&lt;/condition &gt;
								&lt;!-- if condition returns true, then all code after the condition will run and 
								then execution will start at the do node or the start of the while node again. --&gt;
							&lt;/while&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                        <p MadCap:conditions="General.Online"><a href="#top" alt="Return to Top">Return to Top</a>
                        </p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p MadCap:conditions="General.PDF">&#160;</p>
        <h2 MadCap:conditions="General.PDF"><a name="Convert"></a>|Convert</h2>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:conditionalText MadCap:conditions="General.Online">
                    <MadCap:dropDownHotspot><a name="ConvertOnline"></a>|Convert</MadCap:dropDownHotspot>
                </MadCap:conditionalText>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|convert</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Converts a value of one type into the type specified by the type parameter.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>type: (Required) the type to convert to.</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>
                                        <p>Int16</p>
                                    </li>
                                    <li>
                                        <p>Int32</p>
                                    </li>
                                    <li>
                                        <p>Int64</p>
                                    </li>
                                    <li>
                                        <p>Single</p>
                                    </li>
                                    <li>
                                        <p>Double</p>
                                    </li>
                                    <li>
                                        <p>DateTime</p>
                                    </li>
                                    <li>
                                        <p>Boolean</p>
                                    </li>
                                    <li>
                                        <p>Guid</p>
                                    </li>
                                    <li>
                                        <p>String</p>
                                    </li>
                                </ul>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>A single subnode that returns the value to convert</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>The converted subnode of the type specified</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>convert</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns 90 as a double. --&gt;
										&lt;convert type="double"&gt;
										&lt;const value="90" /&gt;
									&lt;/convert&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>convert</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- The convert tag turns true into 1 and false into 0, which is then summed
										up and set in the Overflow_Count field.--&gt;
										&lt;block&gt;
										&lt;set name="counter"&gt;
										&lt;const value="0" /&gt;
										&lt;/set&gt;
										&lt;set name="list"&gt;
										&lt;list&gt;
										&lt;getformstate name="105375" /&gt;
										&lt;getformstate name="1053752" /&gt;
										&lt;getformstate name="1053753" /&gt;
										&lt;getformstate name="1053754" /&gt;
										&lt;getformstate name="1053755" /&gt;
										&lt;getformstate name="1053756" /&gt;
										&lt;getformstate name="1053757" /&gt;
										&lt;getformstate name="1053758" /&gt;
										&lt;getformstate name="1053759" /&gt;
										&lt;getformstate name="10537510" /&gt;
										&lt;getformstate name="105375-2" /&gt;
										&lt;getformstate name="105375-22" /&gt;
										&lt;getformstate name="105375-23" /&gt;
										&lt;getformstate name="105375-24" /&gt;
										&lt;getformstate name="105375-25" /&gt;
										&lt;getformstate name="105375-26" /&gt;
										&lt;getformstate name="105375-27" /&gt;
										&lt;getformstate name="105375-28" /&gt;
										&lt;getformstate name="105375-29" /&gt;
										&lt;getformstate name="105375-210" /&gt;
										&lt;getformstate name="105375-3" /&gt;
										&lt;getformstate name="105375-32" /&gt;
										&lt;getformstate name="105375-33" /&gt;
										&lt;getformstate name="105375-34" /&gt;
										&lt;getformstate name="105375-35" /&gt;
										&lt;getformstate name="105375-36" /&gt;
										&lt;getformstate name="105375-37" /&gt;
										&lt;getformstate name="105375-38" /&gt;
										&lt;getformstate name="105375-39" /&gt;
										&lt;getformstate name="105375-310" /&gt;
										&lt;getformstate name="105375-4" /&gt;
										&lt;/list&gt;
										&lt;/set&gt;
										&lt;foreach name="item"&gt;
										&lt;get name="list" /&gt;
										&lt;set name="counter"&gt;
										&lt;math op="+"&gt;
										&lt;get name="counter" /&gt;
										&lt;convert type="Int32"&gt;
										&lt;get name="item" /&gt;
										&lt;/convert&gt;
										&lt;/math&gt;
										&lt;/set&gt;
										&lt;/foreach&gt;
										&lt;diset dataitemid="Overflow_Count"&gt;
										&lt;get name="counter" /&gt;
										&lt;/diset&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|dictionaryforeach</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Iterates through all key/value pairs in a dictionary.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>keyname: Name of the variable to store the dictionary pair's key</li>
                            <li>valuename: Name of the variable to store the dictionary pair's value</li>
                            <li>result (Optional): The variable name this node will return.</li>
                            <li>comment (Optional): A description of this node.</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>dictionaryforeach</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!--Iterates a dictionary, converting the values to booleans and counts the number of True values--&gt;
								&lt;set name="trueCount"&gt;
								&lt;const value="0"/&gt;
								&lt;/set&gt;
								&lt;dictionaryforeach keyname="myKey" valuename="myValue"&gt;
								&lt;parsedictionaryjson&gt;
								&lt;diget dataitemid="MyDataItemId"/&gt;
								&lt;/parsedictionaryjson&gt;
								&lt;if&gt;
								&lt;condition&gt;
								&lt;compare op="=="&gt;
								&lt;const value="true" /&gt;
								&lt;convert type="bool"&gt;
								&lt;get name="myValue" /&gt;
								&lt;/convert&gt;
								&lt;/compare&gt;
								&lt;/condition&gt;
								&lt;set name="trueCount"&gt;
								&lt;math op="+"&gt;
								&lt;get name="trueCount"/&gt;
								&lt;const value="1" /&gt;
								&lt;/math&gt;
								&lt;/set&gt;
								&lt;/if&gt;
							&lt;/dictionaryforeach&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|parsedictionaryjson</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Converts a JSON string to a dictionary of {string, string}.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment (Optional): A description of this node.</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>parsedictionaryjson</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!--Converts a JSON string to a dictionary of {string, string}--&gt;
								&lt;parsedictionaryjson&gt;
								&lt;diget dataitemid="MyDataItemId"/&gt;
							&lt;/parsedictionaryjson&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot><a name="tostring"></a>|tostring</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Converts a value to a string. If the value to be converted is a number or date then &lt;tostring&gt; can also format the value.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>format: (Optional) the format string. The format used here is not the same as used in the &lt;format&gt; tag. Notably, the {index[,alignment][:formatString]} curly brace syntax will work in &lt;format&gt;, but it will not work in &lt;tostring&gt;.</p>
                                <p>Example format strings, their input, and their result:</p>
                                <ul>
                                    <li>
                                        <p>Numbers:</p>
                                        <ul>
                                            <li>
                                                <p>Format: "C" Input: "45" Result: "$45.00"</p>
                                            </li>
                                            <li>
                                                <p>Format: "F0" Input: "23.77" Result: "24"</p>
                                            </li>
                                            <li>
                                                <p>Format: "F1" Input: "23.77" Result: "23.8"</p>
                                            </li>
                                            <li>
                                                <p>Format: "F2" Input: "23.77" Result: "23.77"</p>
                                            </li>
                                        </ul>
                                    </li>
                                    <li>
                                        <p>Dates:</p>
                                        <ul>
                                            <li>
                                                <p>Format: "D" Input: "01/03/2017" Result: "Tuesday, January 03, 2017"</p>
                                            </li>
                                            <li>
                                                <p>Format: "d" Input: "01/03/2017" Result: "1/3/2017"</p>
                                            </li>
                                        </ul>
                                    </li>
                                    <li>For more information see the C# Standard Format Strings</li>
                                </ul>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>A single subnode to be converted into a string. If the subnode is already a string then the format will not run as expected.</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>A string formatted according to the format attribute</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>tostring</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns '0090' as a string. --&gt;
										&lt;tostring format="0000"&gt;
										&lt;const value="90" /&gt;
									&lt;/tostring&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>tostring</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Sets output 1 formatted as $0.00 --&gt;
										&lt;diset dataitemid="Output_1"&gt;
										&lt;tostring format="C"&gt;
										&lt;diget dataitemid="Input_0" type="Int32" failvalue="0" /&gt;
										&lt;/tostring&gt;
									&lt;/diset&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <p MadCap:conditions="General.Online"><a href="#top" alt="Return to Top">Return to Top</a>
                        </p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p MadCap:conditions="General.PDF">&#160;</p>
        <h2 MadCap:conditions="General.PDF"><a name="DateTime"></a>|DateTime</h2>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:conditionalText MadCap:conditions="General.Online">
                    <MadCap:dropDownHotspot><a name="DateTimeOnline"></a>|DateTime</MadCap:dropDownHotspot>
                </MadCap:conditionalText>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|datetimeadd</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Adds the specified number of years, months, days, hours, minutes, or seconds to the DateTime.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>option: (Required) the unit of time to add.</p>
                                <p>Accepted values are:</p>
                                <ul>
                                    <li>
                                        <p>Year</p>
                                    </li>
                                    <li>
                                        <p>Month</p>
                                    </li>
                                    <li>
                                        <p>Day</p>
                                    </li>
                                    <li>
                                        <p>Hour</p>
                                    </li>
                                    <li>
                                        <p>Minute</p>
                                    </li>
                                    <li>
                                        <p>Second</p>
                                    </li>
                                </ul>
                            </li>
                            <li>comment: (Optional) a description of this node.</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>
                                <p>The first subnode must be a DateTime.</p>
                            </li>
                            <li>
                                <p>The second subnode must be a number.</p>
                            </li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>A DateTime</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>datetimeadd</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;datetimeadd option="Month"&gt;
										&lt;const value="2/1/2010" /&gt;
										&lt;const value="6" /&gt;
									&lt;/datetimeadd&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>datetimeadd</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Calculates age via determining how many days until the next birthday --&gt;
										&lt;block&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;not&gt;
										&lt;isnull&gt;
										&lt;diget dataitemid="Insured_DOB" type="DateTime" /&gt;
										&lt;/isnull&gt;
										&lt;/not&gt;
										&lt;/condition&gt;
										&lt;set name="birthday"&gt;
										&lt;diget dataitemid="Insured_DOB" type="DateTime" /&gt;
										&lt;/set&gt;
										&lt;set name="years"&gt;
										&lt;math op="/"&gt;
										&lt;datetimedifference option="Day"&gt;
										&lt;datetimenow /&gt;
										&lt;get name="birthday" /&gt;
										&lt;/datetimedifference&gt;
										&lt;const value="365.25" type="Double" /&gt;
										&lt;/math&gt;
										&lt;/set&gt;
										&lt;set name="nextBirthday"&gt;
										&lt;datetimeadd option="Year"&gt;
										&lt;get name="birthday" /&gt;
										&lt;convert type="Int32"&gt;
										&lt;round option="AwayFromZero"&gt;
										&lt;get name="years" /&gt;
										&lt;/round&gt;
										&lt;/convert&gt;
										&lt;/datetimeadd&gt;
										&lt;/set&gt;
										&lt;set name="previousBirthday"&gt;
										&lt;datetimeadd option="Year"&gt;
										&lt;get name="birthday" /&gt;
										&lt;convert type="Int32"&gt;
										&lt;round option="TowardsZero"&gt;
										&lt;get name="years" /&gt;
										&lt;/round&gt;
										&lt;/convert&gt;
										&lt;/datetimeadd&gt;
										&lt;/set&gt;
										&lt;set name="nextBirthdayDays"&gt;
										&lt;datetimedifference option="Day"&gt;
										&lt;get name="nextBirthday" /&gt;
										&lt;datetimenow /&gt;
										&lt;/datetimedifference&gt;
										&lt;/set&gt;
										&lt;set name="previousBirthdayDays"&gt;
										&lt;datetimedifference option="Day"&gt;
										&lt;datetimenow /&gt;
										&lt;get name="previousBirthday" /&gt;
										&lt;/datetimedifference&gt;
										&lt;/set&gt;
										&lt;set name="age"&gt;
										&lt;round option="AwayFromZero"&gt;
										&lt;get name="years" /&gt;
										&lt;/round&gt;
										&lt;/set&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;compare op="&amp;lt;"&gt;
										&lt;get name="previousBirthdayDays" /&gt;
										&lt;get name="nextBirthdayDays" /&gt;
										&lt;/compare&gt;
										&lt;/condition&gt;
										&lt;set name="age"&gt;
										&lt;round option="TowardsZero"&gt;
										&lt;get name="years" /&gt;
										&lt;/round&gt;
										&lt;/set&gt;
										&lt;/if&gt;
										&lt;diset dataitemid="Insured_Age"&gt;
										&lt;get name="age" /&gt;
										&lt;/diset&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|datetimedifference</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Returns the number of years, months, days, hours, minutes, or seconds that have passed between the two dates.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>option: (Required) The unit of time we are returning.</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>
                                        <p>Year</p>
                                    </li>
                                    <li>
                                        <p>Month</p>
                                    </li>
                                    <li>
                                        <p>Day</p>
                                    </li>
                                    <li>
                                        <p>Hour</p>
                                    </li>
                                    <li>
                                        <p>Minute</p>
                                    </li>
                                    <li>
                                        <p>Second</p>
                                    </li>
                                </ul>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node.</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>
                                <p>The first subnode must be a DateTime representing the most recent date. If the first node is not the most recent date then the resulting value is negative.</p>
                            </li>
                            <li>
                                <p>The second subnode is another DateTime to subtract from the first node.</p>
                            </li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>A number representing the number of years, months, days, hours, minutes, or seconds that have passed between the two dates.</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>datetimedifference</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns 2 --&gt;
										&lt;datetimedifference option="Year"&gt;
										&lt;const value="1/1/2012" /&gt; &lt;!-- most recent goes first --&gt;
										&lt;const value="1/1/2010" /&gt;
									&lt;/datetimedifference&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>datetimedifference</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Checks the Annuitant Date of Birth to see if he/she is a juvenile --&gt;
										&lt;block&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;not&gt;
										&lt;isnull&gt;
										&lt;diget dataitemid="Annuitant_DOB" type="DateTime" /&gt;
										&lt;/isnull&gt;
										&lt;/not&gt;
										&lt;/condition&gt;
										&lt;set name="age"&gt;
										&lt;datetimedifference option="Year"&gt;
										&lt;datetimenow /&gt;
										&lt;diget dataitemid="Annuitant_DOB" type="DateTime" /&gt;
										&lt;/datetimedifference&gt;
										&lt;/set&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;compare op="&amp;lt;"&gt;
										&lt;get name="age" /&gt;
										&lt;const value="18" type="Int32" /&gt;
										&lt;/compare&gt;
										&lt;/condition&gt;
										&lt;diset dataitemid="Annuitant_isJuvenile"&gt;
										&lt;const value="Yes" /&gt;
										&lt;/diset&gt;
										&lt;else /&gt;
										&lt;diset dataitemid="Annuitant_isJuvenile"&gt;
										&lt;const value="No" /&gt;
										&lt;/diset&gt;
										&lt;/if&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|datetimeget</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Extracts the year, month, day, hour, minute, or second from the DateTime.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>option: (Required) The unit of time to get from the DateTime and return.</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>
                                        <p>Year</p>
                                    </li>
                                    <li>
                                        <p>Month</p>
                                    </li>
                                    <li>
                                        <p>Day</p>
                                    </li>
                                    <li>
                                        <p>Hour</p>
                                    </li>
                                    <li>
                                        <p>Minute</p>
                                    </li>
                                    <li>
                                        <p>Second</p>
                                    </li>
                                </ul>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>A single node that returns DateTime</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>A number representing the time pulled from the DateTime</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>datetimeget</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns 6 --&gt;
										&lt;datetimeget option="Month"&gt;
										&lt;const value="6/1/2010" /&gt;
									&lt;/datetimeget&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>datetimeget</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- checks to see if a date is not more than 90 days in the future
										and not after the 28th of the month --&gt;
										&lt;block&gt;
										&lt;set name="message"&gt;
										&lt;const value="NONE" /&gt;
										&lt;/set&gt;
										&lt;set name="postmessage"&gt;
										&lt;const value="false" /&gt;
										&lt;/set&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="AuthorizedOwner_WithdrawalDate" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;compare op="&amp;lt;"&gt;
										&lt;diget dataitemid="AuthorizedOwner_WithdrawalDate" type="DateTime" /&gt;
										&lt;datetimenow /&gt;
										&lt;/compare&gt;
										&lt;/condition&gt;
										&lt;set name="postmessage"&gt;
										&lt;const value="true" /&gt;
										&lt;/set&gt;
										&lt;set name="message"&gt;
										&lt;const value="Date cannot be in the past." /&gt;
										&lt;/set&gt;
										&lt;/if&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="AuthorizedOwner_WithdrawalDate" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;compare op="&amp;gt;"&gt;
										&lt;datetimedifference option="Day"&gt;
										&lt;diget dataitemid="AuthorizedOwner_WithdrawalDate" type="DateTime" /&gt;
										&lt;datetimenow /&gt;
										&lt;/datetimedifference&gt;
										&lt;const value="90" type="double" /&gt;
										&lt;/compare&gt;
										&lt;/condition&gt;
										&lt;set name="postmessage"&gt;
										&lt;const value="true" /&gt;
										&lt;/set&gt;
										&lt;set name="message"&gt;
										&lt;const value="Date cannot be greater than 90 days in the future." /&gt;
										&lt;/set&gt;
										&lt;/if&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="AuthorizedOwner_WithdrawalDate" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;compare op="&amp;gt;"&gt;
										&lt;datetimeget option="Day"&gt;
										&lt;diget dataitemid="AuthorizedOwner_WithdrawalDate" 
										type="DateTime" failvalue="1/30/1" /&gt;
										&lt;/datetimeget&gt;
										&lt;const value="28" /&gt;
										&lt;/compare&gt;
										&lt;/condition&gt;
										&lt;set name="postmessage"&gt;
										&lt;const value="true" /&gt;
										&lt;/set&gt;
										&lt;set name="message"&gt;
										&lt;const value="Day cannot be greater than the 28th day of the month." /&gt;
										&lt;/set&gt;
										&lt;/if&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;get name="postmessage" /&gt;
										&lt;/condition&gt;
										&lt;postmessage dataitemid="AuthorizedOwner_WithdrawalDate"&gt;
										&lt;get name="message" /&gt;
										&lt;/postmessage&gt;
										&lt;else /&gt;
										&lt;removemessage dataitemid="AuthorizedOwner_WithdrawalDate" /&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|datetimenow</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Returns the current date and time. </p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>None (must be self-closed)</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>A DateTime object with the current date and time in the server's timezone. Since Hexure is located in Colorado Springs, the server's time is set to Mountain Time.</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <p>&lt;datetimenow /&gt;</p>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>datetimenow</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Calculates the nearest birthday by assuming that there are 365.25 days in a year --&gt;
										&lt;block&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;not&gt;
										&lt;isnull&gt;
										&lt;diget dataitemid="Annuitant_DOB" type="DateTime" /&gt;
										&lt;/isnull&gt;
										&lt;/not&gt;
										&lt;/condition&gt;
										&lt;set name="ageDays"&gt;
										&lt;datetimedifference option="Day"&gt;
										&lt;datetimenow /&gt;
										&lt;diget dataitemid="Annuitant_DOB" type="DateTime" /&gt;
										&lt;/datetimedifference&gt;
										&lt;/set&gt;
										&lt;set name="age"&gt;
										&lt;round option="Normal"&gt;
										&lt;math op="/"&gt;
										&lt;get name="ageDays" /&gt;
										&lt;const value="365.25" type="Double" /&gt;
										&lt;/math&gt;
										&lt;/round&gt;
										&lt;/set&gt;
										&lt;diset dataitemid="Annuitant_Age"&gt;
										&lt;get name="age" /&gt;
										&lt;/diset&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|datetimeutcnow</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Returns the current date and time in the Universal Coordinated Time (UTC) timezone. UTC time represents the time at 0 degrees longitude. The line of 0 degrees longitude runs through the Royal Observatory in Greenwich England.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>None (must be self-closed)</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>A DateTime object with the current date and time in UTC</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <p>&lt;datetimeutcnow /&gt;</p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|datetimeyearspassed</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p><b>DEPRECATED: NOT FOR NEW FORMS DEVELOPMENT!</b> Use datetimedifference instead. </p>
                        <p>Returns the number of years that have passed between the two dates. &lt;datetimeyearspassed&gt; is equivalent to &lt;datetimedifference option="Year"&gt;.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>comment: (Optional) a description of this node.</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>
                                <p>The first subnode must be a DateTime representing the most recent date. If the first node is not the most recent date then the resulting value is negative.</p>
                            </li>
                            <li>
                                <p>The second subnode is another DateTime to subtract from the first node.</p>
                            </li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>An Int32 representing the years that have passed between the two dates.</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>datetimeyearspassed</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns 2 --&gt;
								&lt;datetimeyearspassed&gt;
								&lt;const value="1/1/2012" /&gt;
								&lt;const value="1/1/2010" /&gt;
							&lt;/datetimeyearspassed&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p MadCap:conditions="General.PDF">&#160;</p>
        <h2 MadCap:conditions="General.PDF"><a name="GetSet"></a>|Get Set</h2>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:conditionalText MadCap:conditions="General.Online">
                    <MadCap:dropDownHotspot><a name="GetSetOnline"></a>|Get Set</MadCap:dropDownHotspot>
                </MadCap:conditionalText>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <MadCap:dropDown>
                    <MadCap:dropDownHead><a name="|cellget"></a>
                        <MadCap:dropDownHotspot>|cellget</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets the value on a cell in a row. This only works in the context of the <a href="#|table">table</a> node. A row must be accessed through a list node on the loaded table like foreach or listget.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: the name of the table's column (i.e., From, Duration, etc.).</li>
                            <li>prop: the property to set (Value, IsDisabled, ItemSource, or Message).</li>
                            <li> type	(optional): the type the value is converted to (int, bool, double, ect.) before being returned.</li>
                            <li>failvalue	(optional): the value to return if the dataitem's value fails to convert.</li>
                            <li>parseformatting	(optional): set to true if you want this node to be able to parse floating point values with thousand separators and currency symbols.</li>
                            <li>comment (optional): a description of this node</li>
                        </ul>
                        <p>Subnodes:</p>
                        <ul>
                            <li>A row object pulled from a loaded table.</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>cellget</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- The cellget node is used to pull the Value of Adjustment --&gt;
								&lt;table type="Schedule" name="list" dataitemid="Test_S"&gt;
								&lt;select name="prop"&gt;
								&lt;get name = "list" /&gt;
								&lt;cellget prop="Value" name="Adjustment" type="double" failvalue="0" parseformatting="true"&gt;
								&lt;get name = "prop" /&gt;
								&lt;/cellget&gt;
								&lt;/select&gt;
							&lt;/table&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead><a name="|cellset"></a>
                        <MadCap:dropDownHotspot>|cellset</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets the value on a cell in a row. This only works in the context of the <a href="#|table">table</a> node. A row must be accessed through a list node on the loaded table like foreach or listget.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: the name of the table's column (i.e., From, Duration, etc.).</li>
                            <li>prop: the property on the item (Value, IsDisabled, ItemSource, Message)</li>
                            <li>format	(optional): the format to turn the subnode's value into a string</li>
                            <li>comment (optional): a description of this node</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>cellset</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!--this sets a validation message off on Adjustment--&gt;
								&lt;table type="Schedule" name="list" dataitemid="Test_S"&gt;
								&lt; cellset prop="Message" name="Adjustment"&gt;
								&lt;get name = "item" /&gt;
								&lt;const value= "The Percent is too high" /&gt;
								&lt;/ cellset &gt;
							&lt;/table&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|copyappstatus</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Determines if the application is a new application, an exact copy of another application, or a copy of another application with changes.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>None (must be self-closed)</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>One of three strings:</p>
                                <ul>
                                    <li>
                                        <p>"none"</p>
                                    </li>
                                    <li>
                                        <p>"copyas"</p>
                                    </li>
                                    <li>
                                        <p>"copychanges"</p>
                                    </li>
                                </ul>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>copyappstatus</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Sets a field depending if the application is a copy --&gt;
								&lt;if&gt;
								&lt;condition&gt;
								&lt;or&gt;
								&lt;compare op="=="&gt;
								&lt;const value="copyas"/&gt;
								&lt;copyappstatus/&gt;
								&lt;/compare &gt;
								&lt;compare op="=="&gt;
								&lt;const value="copychanges"/&gt;
								&lt;copyappstatus/&gt;
								&lt;/compare &gt;
								&lt;/or&gt;
								&lt;/condition &gt;
								&lt;diset dataitemid="Application_isCopy"&gt;
								&lt;const value="Copy" /&gt;
								&lt;/diset &gt;
							&lt;/if&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|copytabletodirange</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>This is a rule node that copies values from a table into a range of dataitems. Both the dataitemids and value to be set are determined by the  format provided for each. The format uses a {VarName} notation where VarName is either INDEX INDEXPLUSONE or the name of the column in the table/list. The VarName plus the encompassing braces are wholly replaced by the specified value. INDEX denotes the row position starting with 0. Where INDEXPLUSONE denotes the same but starts a 1. The rule goes through each of the rows in the table and uses the formats to generate both the dataitemid and the value for that dataitem. If the dataitem specified does not exist, it is skipped. This rule will still run if none of the dataitems specified exist but will do nothing. If a potential dataitemid exists but insufficient rows are in the table, it will not be set.</p>
                        <p>The {VarName} allows the use of C# string formatting where a colon is used to specify a format. Where using {INDEX:00} will ensure the index will result in values like 00, 01, etc.</p>
                        <p>Since the columns are stored as string only, formats for the string class will work.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>ignorehidden: (Optional) if true, skip any rows currently hidden.</p>
                            </li>
                            <li>
                                <p>list: the name of the variable that the table/list is stored.</p>
                            </li>
                            <li>
                                <p>idformat: the format to generate the dataitemid to set.</p>
                            </li>
                            <li>
                                <p>valueformat: the format to generate the value being set to the dataitem.</p>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node.</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>copytabletodirange</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;table type="Grid" name="list" dataitemid="Test_S"&gt;
								&lt;copytabletodirange list="list" idformat="Initial_{INDEX}" valueformat="{ColumnName} Percent" /&gt;
							&lt;/table&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                        <p> </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>copytabletodirange</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;table type="Grid" name="list" dataitemid="Test_S" &gt;
								&lt;copytabletodirange list="list" idformat="Initial_{INDEX}" valueformat="{ColumnName} Percent" ignorehidden="true"/&gt;
								&lt;/table&gt;
							</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                        <p>&#160;</p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>copytabletodirange</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;table type="Grid" list="nameofcustomlist" name="mylist" dataitemid="mygrid"&gt;
								&lt;copytabletodirange list="mylist" idformat="Column1_{INDEX}" valueformat="{Column1} Test" /&gt;
							&lt;/table&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|dicopy</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Copies a value of one field to another field. This is a one-way copy only.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>sourcedataitemid: (Required) the source data item to copy from.</p>
                            </li>
                            <li>
                                <p>destdataitemid: (Required) the destination data item to copy to.</p>
                            </li>
                            <li>
                                <p>type: (Optional) The Type the Source DataItem's value is converted to before setting the Destination.</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>
                                        <p>Int16</p>
                                    </li>
                                    <li>
                                        <p>Int32</p>
                                    </li>
                                    <li>
                                        <p>Int64</p>
                                    </li>
                                    <li>
                                        <p>Single</p>
                                    </li>
                                    <li>
                                        <p>Double</p>
                                    </li>
                                    <li>
                                        <p>DateTime</p>
                                    </li>
                                    <li>
                                        <p>Boolean</p>
                                    </li>
                                    <li>
                                        <p>Guid</p>
                                    </li>
                                    <li>
                                        <p>String</p>
                                    </li>
                                </ul>
                            </li>
                            <li>
                                <p>failvalue: (Optional) The value to be used if the Source DataItem's value fails to be converted.</p>
                            </li>
                            <li>
                                <p>format: (Optional) The format to turn the Destination's value back into a string. Uses the same rules as the &lt;convert&gt; tag.</p>
                            </li>
                            <li>
                                <p>parseformatting: (Optional) set this to true if you want this node to be able to parse floating point values with thousand separators and currency symbols.</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>None (must be self-closed)</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>dicopy</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Gets someDataItem and converts it to an int and if it cannot be converted, then 0 
								is used; after that the format is applied and then someDataItemB is set with the value. 
								(format, type, and failvalue are optional; if only type is provided, then it returns 
								null on failure) --&gt;
								&lt;dicopy
								sourcedataitemid="someDataItemA"
								destdataitemid="someDataItemB"
								type="Double"
								failvalue="0"
							format="00.00" /&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|diget</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets the value of a dataitem.</p>
                        <p>The value of a dataitem for a textbox or calendar is the value written in the box. For a radio button the value is an empty string if the box is unchecked, or the export value if it is checked.</p>
                        <p>When working with calendar fields it is important to convert the date to string correctly. It is highly recommended that whenever the "type" attribute is used that "failvalue" is also used. An alternative to failvalue is to explicitly check if the type conversion failed. A failed conversion returns Null, which may throw an exception if a Null value is used in another tag.</p>
                        <p>In addition to getting fields on the page, there are dataitems that are included in every package and are retrievable with &lt;diget&gt; - such as FLI_PRODUCT_NAME. See the FireLight<sup MadCap:conditions="General.Online">®</sup> Admin Help, "FireLight Global Data Items" topic for more information.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>dataitemid: (Required) The dataitem's id to retrieve.</li>
                            <li>version: (Optional) If version="Original" then this diget will return the value of the dataitem that was passed in via inbound 103 or SAML.</li>
                            <li>
                                <p>type: (Optional) The Type the Source DataItem's value is converted to before setting the Destination.</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>
                                        <p>Int16</p>
                                    </li>
                                    <li>
                                        <p>Int32</p>
                                    </li>
                                    <li>
                                        <p>Int64</p>
                                    </li>
                                    <li>
                                        <p>Single</p>
                                    </li>
                                    <li>
                                        <p>Double</p>
                                    </li>
                                    <li>
                                        <p>DateTime</p>
                                    </li>
                                    <li>
                                        <p>Boolean</p>
                                    </li>
                                    <li>
                                        <p>Guid</p>
                                    </li>
                                    <li>
                                        <p>String</p>
                                    </li>
                                </ul>
                            </li>
                            <li>
                                <p>failvalue: (Optional) The value to be used if the dataitem's value fails to be converted.</p>
                            </li>
                            <li>
                                <p>parseformatting: (Optional) set this to true if you want this node to be able to parse floating-point values with thousand separators and currency symbols. May only be true if the type attribute is a floating-point type. (Single and Double are the two floating-point types.)</p>
                                <p>Example: will turn "$1,125.54" into "1125.54."</p>
                            </li>
                            <li>
                                <p>addifnotfound: (Optional) set this to true if you want to add this data item ID if not found in the package. The addifnotfound part of a diget rule node gets “executed” when the diget node gets initialized, which means that the app data will always have the data item initialized at least to null, regardless of whether the rule actually executed or not.</p>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node.</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>None (must be self-closed)</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>A string by default if a type attribute is not specified. If there is a type attribute and the type conversion succeeds then it will return the type specified. If the type conversion fails and there is a failvalue it will return the failvalue. If the type conversion fails and there is not a failvalue then it will return Null.</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>diget</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Gets someDataItem and converts it to an int and if it can't be converted, then
										0 is returned (type and failvalue are optional; if only type is provided, then it
										returns null on failure) --&gt;
									&lt;diget dataitemid="someDataItem"  type="Int32" failvalue="0" version="Current" /&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>diget</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Insured's DOB must be valid and must be in the past. This shows an example
										of manually checking to see if a date is Null.  --&gt;
										&lt;block&gt;
										&lt;set name="nullCondition"&gt;
										&lt;!-- true if blank or improperly formatted --&gt;
										&lt;isnull&gt;
										&lt;diget dataitemid="Insured_DOB" type="DateTime" /&gt;
										&lt;/isnull&gt;
										&lt;/set&gt;
										&lt;set name="emptyCondition"&gt;
										&lt;!-- true if the field is blank --&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="Insured_DOB" type="String" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/set&gt;
										&lt;set name="futureCondition"&gt;
										&lt;!-- true if the date is in the future --&gt;
										&lt;compare op="&amp;gt;="&gt;
										&lt;!-- Change this to &amp;lt; for date must be in the future --&gt;
										&lt;diget dataitemid="Insured_DOB" type="DateTime" /&gt;
										&lt;datetimenow /&gt;
										&lt;/compare&gt;
										&lt;/set&gt;
										&lt;if&gt;
										&lt;!-- If someone enters a invalid date --&gt;
										&lt;condition&gt;
										&lt;get name="nullCondition" /&gt;
										&lt;not&gt;
										&lt;get name="emptyCondition" /&gt;
										&lt;/not&gt;
										&lt;/condition&gt;
										&lt;postmessage dataitemid="Insured_DOB"&gt;
										&lt;const value="DOB must be a valid date." /&gt;
										&lt;/postmessage&gt;
										&lt;else /&gt;
										&lt;diset dataitemid="Insured_DOB" format="MM/dd/yyyy"&gt;
										&lt;diget dataitemid="Insured_DOB" type="DateTime" /&gt;
										&lt;/diset&gt;
										&lt;/if&gt;
										&lt;if&gt;
										&lt;!-- If someone enters a date in the future --&gt;
										&lt;condition&gt;
										&lt;get name="futureCondition" /&gt;
										&lt;/condition&gt;
										&lt;postmessage dataitemid="Insured_DOB"&gt;
										&lt;const value="DOB cannot be in the future." /&gt;
										&lt;/postmessage&gt;
										&lt;else /&gt;
										&lt;/if&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;or&gt;
										&lt;and&gt;
										&lt;not&gt;
										&lt;get name="futureCondition" /&gt;
										&lt;/not&gt;
										&lt;not&gt;
										&lt;get name="nullCondition" /&gt;
										&lt;/not&gt;
										&lt;/and&gt;
										&lt;get name="emptyCondition" /&gt;
										&lt;/or&gt;
										&lt;/condition&gt;
										&lt;removemessage dataitemid="Insured_DOB" /&gt;
										&lt;else /&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 3</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>diget</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Use AddIfNotFound attribute, which adds the data item if it does not exist. --&gt;
										&lt;setvisibility dataitemid="LABEL_Deposit_Non Qualified" comment=”display label if any of the 4 checkboxes are checked”&gt;
										&lt;or&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="PLAN_TYPE_NQ_NEWMONEY" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="PLAN_TYPE_NQ_1035_EXCHANGE" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="PLAN_TYPE_NQ_TRANSFER" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace &gt;
										&lt;diget dataitemid="PLAN_TYPE_NQSTRETCH" AddIfNotFound="true" /&gt;
										&lt;/isnullorwhitespace &gt;
										&lt;/not&gt;
										&lt;/or&gt;
									&lt;/setvisibility&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|digetrange</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets an array of DataItems' values. Searches all dataitemids for matches, and then returns the values of the DataItem for each match.</p>
                        <p><b>DEPRECATED: NOT FOR NEW FORMS DEVELOPMENT!</b> &lt;digetrange /&gt; and &lt;disetrange /&gt; are hard to debug, and the rules that use them are difficult to search for.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>value: (Required) The partial string of a DataItemId to look for.</p>
                            </li>
                            <li>
                                <p>option: (Required) The Type of Comparison.</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>
                                        <p>StartsWith</p>
                                    </li>
                                    <li>
                                        <p>EndsWith</p>
                                    </li>
                                    <li>
                                        <p>Contains</p>
                                    </li>
                                </ul>
                            </li>
                            <li>
                                <p>type: (Optional) The Type that the DataItem's value is converted to before being returned. If the type conversion fails (e.x. "hello" cannot be converted into an Int32) then the value returned is the failvalue if one is specified, or Null if a fail value is not specified.</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>
                                        <p>Int16</p>
                                    </li>
                                    <li>
                                        <p>Int32</p>
                                    </li>
                                    <li>
                                        <p>Int64</p>
                                    </li>
                                    <li>
                                        <p>Single</p>
                                    </li>
                                    <li>
                                        <p>Double</p>
                                    </li>
                                    <li>
                                        <p>DateTime</p>
                                    </li>
                                    <li>
                                        <p>Boolean</p>
                                    </li>
                                    <li>
                                        <p>Guid</p>
                                    </li>
                                    <li>
                                        <p>String</p>
                                    </li>
                                </ul>
                            </li>
                            <li>
                                <p>failvalue: (Optional) The value to be returned if the DataItem's value fails to convert.</p>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node.</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>None (must be self-closed)</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>A list containing all of the values if all the dataitems matched by this digetrange.</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>digetrange</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!--Gets all dataitems that starts with 'someD' and converts them to ints, and if they 
								can’t be converted, they are returned as 0. This returns a list, so use list nodes to 
								manipulate (type and failvalue are optional; if only type is provided, then it returns 
								null on failure)  --&gt;
							&lt;digetrange value="someD" option="StartsWith" type="Int32" failvalue="0" /&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|diset</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets the value of a field on the page to a new value.</p>
                        <p>When dealing with radio buttons, it is important to note the export value of the button. If the value of radio button is set to an empty string "" it is unchecked. If it is set to its export value it is checked. If you try to set the value of a radio button to a value that is not its export value then it will remain unchecked.</p>
                        <p>Here it is <b>very important</b> to be cognizant of when any rule containing a diset will run. If the rule is set to run on "All" or "Initialize" then the rule will run after the application is saved and reloaded and may overwrite the saved value.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>addifnotfound: (Optional) True if you want to add this dataitem ID if not found in package.</li>
                            <li>
                                <p>dataitemid: (Required) the DataItem's ID.</p>
                            </li>
                            <li>
                                <p>format: (Optional) The format used to turn the subnode's value into a string. The format used here is not the same as used in the &lt;format&gt; tag. Notably, the {index[,alignment][:formatString]} curly brace syntax will work in &lt;format&gt;, but it will not work here.</p>
                                <p>Example format strings, their input, and their result:</p>
                                <ul>
                                    <li>
                                        <p>Numbers</p>
                                        <ul>
                                            <li>
                                                <p>Format: "C" Input: "45" Result: "$45.00"</p>
                                            </li>
                                            <li>
                                                <p>Format: "F0" Input: "23.77" Result: "24"</p>
                                            </li>
                                            <li>
                                                <p>Format: "F1" Input: "23.77" Result: "23.8"</p>
                                            </li>
                                            <li>
                                                <p>Format: "F2" Input: "23.77" Result: "23.77"</p>
                                            </li>
                                        </ul>
                                    </li>
                                    <li>
                                        <p>Dates</p>
                                        <ul>
                                            <li>
                                                <p>Format: "D" Input: "01/03/2017" Result: "Tuesday, January 03, 2017"</p>
                                            </li>
                                            <li>
                                                <p>Format: "d" Input: "01/03/2017" Result: "1/3/2017"</p>
                                            </li>
                                            <li>
                                                <p>For more information see the C# Standard Format Strings</p>
                                            </li>
                                        </ul>
                                    </li>
                                </ul>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node.</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>A single value that is converted to a string and set as the value of the DataItem.</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>diset</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Sets someDataItem to '06.00' (format is optional) option can be: StartsWith, EndsWith, Contains --&gt;
										&lt;diset dataitemid="someDataItem" option="StartsWith" format="00.00" &gt;
										&lt;const value="6"/&gt;
									&lt;/diset&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>diset</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- If the Agent First Name field is filled out then set the agent full name 1
										to the first name plus the last name --&gt;
										&lt;block&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;and&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="Agent_FirstName" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;/and&gt;
										&lt;/condition&gt;
										&lt;diset dataitemid="AGENT_FULL_NAME_1"&gt;
										&lt;concat&gt;
										&lt;diget dataitemid="Agent_FirstName" /&gt;
										&lt;const value=" " /&gt;
										&lt;diget dataitemid="Agent_LastName" /&gt;
										&lt;/concat&gt;
										&lt;/diset&gt;
										&lt;else /&gt;
										&lt;diset dataitemid="AGENT_FULL_NAME_1"&gt;
										&lt;const value="" /&gt;
										&lt;/diset&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|disetchildren</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p><a name="|disetchildren"></a>Sets the Value for all the dataitem's children. If the data item is a group or a panel, all children will have their values set to a value that is specified. This node should work similarly to diset, but will set the children of a particular component instead of setting the component itself.</p><b class="DRNumberBold">About</b>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>format: (Optional) the format to turn the subnode's value into a string.</p>
                            </li>
                            <li>
                                <p>addifnotfound: (Optional) true if you want to add this data item id if not found in package</p>
                            </li>
                            <li>
                                <p>dataitemid: the DataItem's ID.</p>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>DiSetChildren</MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: JavaScript;">&lt;!-- Sets the value of all the children of someDataItem to '06.00' (format is optional). --&gt;
								&lt;disetchildren dataitemid="someDataItem" format="00.00" &gt;
								&lt;const value="6"/&gt;
							&lt;/disetchildren &gt; </MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                        <p><b class="DRNumberBold">Acceptance Criteria</b>
                        </p>
                        <ul>
                            <li>
                                <p>DiSetChildren will point to a single DataItem. </p>
                            </li>
                            <li>
                                <p>If DataItem is a group or a panel, then all of the children associated will have their values set to the specified value.</p>
                            </li>
                            <li>
                                <p>DiSetChildren is recursive and sets all the children and their children.</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">DiSetChildren Pre-Built Rule Editor Templates</b>
                        </p>
                        <p>Three templates have been added to the Rules Editor:</p>
                        <ul>
                            <li>
                                <p><b class="Bold">DiSet Children Const</b> Gives the children of a panel or group a permanent, constant value.</p>
                            </li>
                            <li>
                                <p><b class="Bold">DiSet Children Const (Blank)</b> If a field is not blank, then sets the children of another panel or group with a constant value. This is useful for clearing all fields of panel or group based on another field.</p>
                            </li>
                            <li>
                                <p><b class="Bold">DiSet Children Const (Value)</b> If a field has the right value then sets the children of another panel or group with another value. This is useful for clearing all fields of panel or group based on another field.</p>
                            </li>
                        </ul>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|disetrange</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets a range of DataItems values.</p>
                        <p><b>DEPRECATED: NOT FOR NEW FORMS DEVELOPMENT!</b> &lt;digetrange /&gt; and &lt;disetrange /&gt; are hard to debug, and the rules that use them are difficult to search for.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>value: The partial string of a DataItemId of the DataItem.</p>
                            </li>
                            <li>
                                <p>option: The Type of Comparison.</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>
                                        <p>StartsWith</p>
                                    </li>
                                    <li>
                                        <p>EndsWith</p>
                                    </li>
                                    <li>
                                        <p>Contains</p>
                                    </li>
                                </ul>
                            </li>
                            <li>
                                <p>format: (Optional) The format to turn the subnode's value into a string.</p>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node.</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>A single value total is set as the value of all matching DataItems.</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>disetrange</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Sets  all dataitems that starts with 'someD' to '06.00'  (format is optional)--&gt;
								&lt;disetrange value="someD" option="StartsWith" format="00.00" &gt;
								&lt;const value="6"/&gt;
							&lt;/disetrange&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|disource</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets the ID of the dataitem that triggered this rule.</p>
                        <p>Rules can be triggered to run when the application is initialized or when a value on the page is changed. (Initialization of applications happens when the application is created or is loaded from a save. ) If the rule is triggered by the application initialization then &lt;disource /&gt; will return "N/A."</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>None (Must be self-closed).</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>"N/A" or the DataItemId that was changed and caused this rule to run.</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <p>&lt;disource /&gt;</p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|get</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets the value of the variable on the stack. A variable is placed on the stack by using the &lt;set name="" &gt; tag.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>None (must be self-closed)</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>The variable's value</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>get</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns the value in variableName --&gt;
									&lt;get name="variableName" /&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2:</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>get</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Makes the avocation questions visible if Insured_PersonalHistory_ScubaDiving == Yes --&gt;
										&lt;block&gt;
										&lt;set name="EnableAvo"&gt;
										&lt;compare op="=="&gt;
										&lt;const value="Yes" type="String" /&gt;
										&lt;diget dataitemid="Insured_PersonalHistory_ScubaDiving" /&gt;
										&lt;/compare&gt;
										&lt;/set&gt;
										&lt;setvisibility dataitemid="Insured_PersonalHistory_ScubaDiving_Activity" clearondisable="true"&gt;
										&lt;get name="EnableAvo" /&gt;
										&lt;/setvisibility&gt;
										&lt;setvisibility dataitemid="Insured_PersonalHistory_Skydiving_Activity" clearondisable="true"&gt;
										&lt;get name="EnableAvo" /&gt;
										&lt;/setvisibility&gt;
										&lt;setvisibility dataitemid="Insured_PersonalHistory_HangGliding_Activity" clearondisable="true"&gt;
										&lt;get name="EnableAvo" /&gt;
										&lt;/setvisibility&gt;
										&lt;setvisibility dataitemid="Insured_PersonalHistory_Racing_Activity" clearondisable="true"&gt;
										&lt;get name="EnableAvo" /&gt;
										&lt;/setvisibility&gt;
										&lt;setvisibility dataitemid="Insured_PersonalHistory_Rodeo_Activity" clearondisable="true"&gt;
										&lt;get name="EnableAvo" /&gt;
										&lt;/setvisibility&gt;
										&lt;setvisibility dataitemid="ScubaDiving_Label" clearondisable="true"&gt;
										&lt;get name="EnableAvo" /&gt;
										&lt;/setvisibility&gt;
										&lt;setvisibility dataitemid="Skydiving_Label" clearondisable="true"&gt;
										&lt;get name="EnableAvo" /&gt;
										&lt;/setvisibility&gt;
										&lt;setvisibility dataitemid="Racing_Label" clearondisable="true"&gt;
										&lt;get name="EnableAvo" /&gt;
										&lt;/setvisibility&gt;
										&lt;setvisibility dataitemid="Rodeo_Label" clearondisable="true"&gt;
										&lt;get name="EnableAvo" /&gt;
										&lt;/setvisibility&gt;
										&lt;setvisibility dataitemid="Hang_Gliding_Label" clearondisable="true"&gt;
										&lt;get name="EnableAvo" /&gt;
										&lt;/setvisibility&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getallforms</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets all forms. Wizards will not be included in the result.</p>
                        <p MadCap:conditions="General.PDF"><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <p>comment: (Optional) a description of this node</p>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>getallforms</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns the forms --&gt;
							&lt;getallforms /&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getallwizards</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets all wizards. Forms will not be included in the result.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <p>comment: (Optional) a description of this node</p>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>getallwizards</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns the wizards --&gt;
							&lt;getallwizards /&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getbackofficeformstate</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets the back office state of a form.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>name: (Required) Either the name or the ID of the form depending on the option attribute</p>
                            </li>
                            <li>
                                <p>option: (Required) Query by form name or by form number</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>Name</li>
                                    <li>Number</li>
                                </ul>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>None (must be self-closed)</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>A boolean</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <p>&lt;getbackofficeformstate name="formNumber" option="Number" /&gt;</p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getcomboitems</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets the items in the dropdown of a combo box. In the event that there is more than one combo box with the same dataitemid but different items, then &lt;getcomboitems&gt; returns the dropdown list from one combo box only.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>dataitemid: (Required) the combo box to get the dropdown items of</p>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>None (must be self-closed)</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>A list of strings containing the options presented by the combo box</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>getcomboitems</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Gets the items of the combo box associated with the dataitemid. This returns a list --&gt;
									&lt;getcomboitems dataitemid="somedataITem" /&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>getcomboitems</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Sets list of dropdown values to Output_List. --&gt;
										&lt;block&gt;
										&lt;set name="result"&gt;
										&lt;const value="" /&gt;
										&lt;/set&gt;
										&lt;foreach name="item"&gt;
										&lt;getcomboitems dataitemid="Combo_Friends" /&gt;
										&lt;set name="result"&gt;
										&lt;concat&gt;
										&lt;get name="result" /&gt;
										&lt;const value="&amp;#xA;" /&gt;
										&lt;get name="item" /&gt;
										&lt;/concat&gt;
										&lt;/set&gt;
										&lt;/foreach&gt;
										&lt;diset dataitemid="Output_List"&gt;
										&lt;get name="result" /&gt;
										&lt;/diset&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getcontrolstate</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Checks if a field is enabled or disabled. The field's visibility has no effect on the value of &lt;getcontrolstate&gt;.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>dataitemid: (Required) the DataItem's ID</p>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>None (must be self-closed)</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>true if the field is enabled, false if it is disabled</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>getcontrolstate</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Gets if the controls associated with the dataitemid are enabled --&gt;
									&lt;getcontrolstate dataitemid="somedataitem" /&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>getcontrolstate</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Disables and hides an initial field if the signature field is disabled --&gt;
										&lt;block&gt;
										&lt;set name="condition"&gt;
										&lt;and&gt;
										&lt;getcontrolstate dataitemid="Insured_Signature_Page7" /&gt;
										&lt;compare op="=="&gt;
										&lt;diget dataitemid="Insured_Interview" /&gt;
										&lt;const value="Yes" type="String" /&gt;
										&lt;/compare&gt;
										&lt;/and&gt;
										&lt;/set&gt;
										&lt;setcontrolstate dataitemid="Insured_Initial_Page7" clearondisable="true"&gt;
										&lt;get name="condition" /&gt;
										&lt;/setcontrolstate&gt;
										&lt;setvisibility dataitemid="Insured_Initial_Page7"&gt;
										&lt;get name="condition" /&gt;
										&lt;/setvisibility&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getcurrentformnumber</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets the current form number of the form the user is currently viewing.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <p>&lt;getcurrentformnumber /&gt;</p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getcurrentpage</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets the current page of the form the user is currently viewing.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <p>&lt;getcurrentpage /&gt;</p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getcustomlist</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets the columns from custom list based on search results.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>list: (Required) The list's name</p>
                            </li>
                            <li>
                                <p>dataitemid: (Optional) The dataitemid where the list's name is stored.</p>
                            </li>
                            <li>
                                <p>searchcol: (Required) Search Against this column</p>
                            </li>
                            <li>
                                <p>returncol: (Required) Columns Returned, Pipe Separated</p>
                            </li>
                            <li>
                                <p>option: (Optional) Search Type</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>Exact</li>
                                    <li>StartsWith</li>
                                    <li>EndsWith</li>
                                    <li>Contains</li>
                                </ul>
                            </li>
                            <li>
                                <p>comment: (Optional) a description of this node</p>
                            </li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>the value to search for</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>A list</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>getcustomlist</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Gets the return columns associated with the custom list, this returns a list. --&gt;
								&lt;getcustomlist list="list name" dataitemid="Dataitem for List name" searchcol="column name" returncol="returned column names" option="Exact|StartsWith|EndsWith|Contains"&gt;
								&lt;const value="search value"/&gt;
							&lt;/getcustomlist&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getformbyname</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets a form or wizard by its name.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: the name of the form</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>getformbyname</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns the form or wizard --&gt;
							&lt;getformbyname name="My Form" /&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getformbynumber</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets a form or wizard by its number.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: the name of the form</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>getformbynumber</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns the form or wizard --&gt;
							&lt;getformbynumber name="1234" /&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <MadCap:pageBreak />
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getformincluded</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Checks to see if the form is in the current package.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: (Required) the form number, not the form name</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>None (must be self-closed)</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>true if the form is in the package at all, false otherwise</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <p>&lt;getformincluded name="formNumber" /&gt;</p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getformincludedbyname</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Checks to see if the form is in the current package. This is identical to &lt;getformincluded&gt; except the name attribute takes the form name and not the form number.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>name: (Required) the form name</p>
                            </li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>None (must be self-closed)</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>true if the form is in the package at all, false otherwise</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <p>&lt;getformincludedbyname name="formName" /&gt;</p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getformsbypackage</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets all forms for a given package. Wizards will not be included in the result.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: the package name</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>getformsbypackage</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns the forms --&gt;
							&lt;getformsbypackage name="My Package Name" /&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getformsforsigner</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets the forms that contain a signature field with the specified signer type. This will only return forms that are currently enabled and in the package.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>name: (Required) The signer type to retrieve forms for.</p>
                            </li>
                            <li>
                                <p>option: (Required) Retrieves the form name or the form number of forms with the right signature fields on them.</p>
                                <p>Accepted Values:</p>
                                <ul>
                                    <li>FormName</li>
                                    <li>FormNumber</li>
                                </ul>
                            </li>
                            <li>comment: (Optional) a description of this node.</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>None (must be self-closed)</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>A list of all forms with that signer type on them in the current package</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <p>&lt;getformsforsigner name="Agent" option="FormName" /&gt;</p>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>getformsforsigner</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Sets SignerTypes_Output as the list of all forms with Owner Signatures on them. --&gt;
										&lt;block&gt;
										&lt;set name="result"&gt;
										&lt;const value="" /&gt;
										&lt;/set&gt;
										&lt;foreach name="item"&gt;
										&lt;getformsforsigner name="Owner" option="FormNumber" /&gt;
										&lt;set name="result"&gt;
										&lt;concat&gt;
										&lt;get name="result" /&gt;
										&lt;const value="&amp;#xA;" /&gt;
										&lt;get name="item" /&gt;
										&lt;/concat&gt;
										&lt;/set&gt;
										&lt;/foreach&gt;
										&lt;diset dataitemid="SignerTypes_Output"&gt;
										&lt;get name="result" /&gt;
										&lt;/diset&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getformstate</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets the state of a form.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: (Required) the form number of the form to check, not the form name</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>None (must be self-closed)</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>True if the form is currently enabled and displayed to the user, false otherwise</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                                <br />
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>getformstate</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns if the form is displayed --&gt;
									&lt;getformstate name="formNumber" /&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>getformstate</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Sets Overflow_Count to the number of triggered overflow forms --&gt;
										&lt;block&gt;
										&lt;set name="counter"&gt;
										&lt;const value="0" /&gt;
										&lt;/set&gt;
										&lt;set name="list"&gt;
										&lt;list&gt;
										&lt;getformstate name="105366" /&gt;
										&lt;getformstate name="1053662" /&gt;
										&lt;getformstate name="1053663" /&gt;
										&lt;getformstate name="1053664" /&gt;
										&lt;getformstate name="1053665" /&gt;
										&lt;getformstate name="1053666" /&gt;
										&lt;getformstate name="1053667" /&gt;
										&lt;getformstate name="1053668" /&gt;
										&lt;getformstate name="1053669" /&gt;
										&lt;getformstate name="10536610" /&gt;
										&lt;getformstate name="105366-2" /&gt;
										&lt;getformstate name="105366-22" /&gt;
										&lt;getformstate name="105366-23" /&gt;
										&lt;getformstate name="105366-24" /&gt;
										&lt;getformstate name="105366-25" /&gt;
										&lt;getformstate name="105366-26" /&gt;
										&lt;getformstate name="105366-27" /&gt;
										&lt;getformstate name="105366-28" /&gt;
										&lt;getformstate name="105366-29" /&gt;
										&lt;getformstate name="105366-210" /&gt;
										&lt;getformstate name="105366-3" /&gt;
										&lt;getformstate name="105366-32" /&gt;
										&lt;getformstate name="105366-33" /&gt;
										&lt;getformstate name="105366-34" /&gt;
										&lt;getformstate name="105366-35" /&gt;
										&lt;getformstate name="105366-36" /&gt;
										&lt;getformstate name="105366-37" /&gt;
										&lt;getformstate name="105366-38" /&gt;
										&lt;getformstate name="105366-39" /&gt;
										&lt;getformstate name="105366-310" /&gt;
										&lt;getformstate name="105366-4" /&gt;
										&lt;/list&gt;
										&lt;/set&gt;
										&lt;foreach name="item"&gt;
										&lt;get name="list" /&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;compare op="&amp;gt;"&gt;
										&lt;convert type="Int32"&gt;
										&lt;get name="item" /&gt;
										&lt;/convert&gt;
										&lt;const value="0" type="Int32" /&gt;
										&lt;/compare&gt;
										&lt;/condition&gt;
										&lt;set name="counter"&gt;
										&lt;math op="+"&gt;
										&lt;get name="counter" /&gt;
										&lt;const value="1" type="Int32" /&gt;
										&lt;/math&gt;
										&lt;/set&gt;
										&lt;/if&gt;
										&lt;/foreach&gt;
										&lt;diset dataitemid="Overflow_Count"&gt;
										&lt;get name="counter" /&gt;
										&lt;/diset&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getformstatebyname</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets the state of a form. The same as &lt;getformstate&gt; except that name actually corresponds to the form name.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: (Required) the form name</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>None (must be self-closed)</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>True if the form is currently enabled and displayed to the user, false otherwise</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>getformstatebyname</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns if the form is displayed --&gt;
							&lt;getformstatebyname name="formName" /&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getreadonly</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Checks to see if a field is read-only.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>dataitemid: the DataItem's ID</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>None (must be self-closed)</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>True if the field is read-only, false otherwise</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>getreadonly</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Gets if the controls associated with the dataitemid are enabled --&gt;
							&lt;getreadonly dataitemid="somedataITem" /&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getvisibility</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Checks to see if a field is visible.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>dataitemid: the DataItem's ID</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>None (must be self-closed)</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>True if the field is visible, false otherwise</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>getvisibility</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Gets if the field is visible on the form --&gt;
							&lt;getvisibility dataitemid="somedataITem" /&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|getwizardsbypackage</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets all wizards for a given package. Forms will not be included in the result.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: the package name</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>getwizardsbypackage</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns the wizards --&gt;
							&lt;getwizardsbypackage name="My Package Name" /&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|ioget</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Returns an object passed in by the system that calls ITScript.</p>
                        <p><b>DEPRECATED: NOT FOR NEW FORMS DEVELOPMENT!</b> &lt;ioget&gt; and &lt;ioset&gt; are no longer functioning and cannot be used. Contact Hexure for more information.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: (Required) The name of the IO object</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>None (must be self-closed)</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>The IO Object</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>ioget</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- call returns someIOName --&gt;
							&lt;ioget name="someIOName"/&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|ioset</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets an Object to be used by the code calling ITScript.</p>
                        <p><b>DEPRECATED: NOT FOR NEW FORMS DEVELOPMENT!</b> &lt;ioget&gt; and &lt;ioset&gt; are no longer functioning and cannot be used. Contact Hexure for more information.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: (Required) The name of the IO object</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single value to set</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>ioset</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- sets someIOName to 4 for use outside of ITScript --&gt;
								&lt;ioset name="someIOName"&gt;
								&lt;const value="4"/&gt;
							&lt;/ioset&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|isconsole</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Returns true if the rules are running on a console.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>None (must be self-closed)</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>A boolean</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <p>&lt;isconsole /&gt;</p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|isnewapp</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Returns true if this is the first time the rules have run for this application.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>None (must be self-closed)</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>A boolean</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <p>&lt;isnewapp /&gt;</p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot><a name="listget"></a>|listget</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets a value from a list by its index. Lists are 0-based, meaning that the first value in a list has index 0. &lt;listget&gt; in other languages is equivalent to myList[i].</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>The first subnode must be the list to get the value from.</li>
                            <li>The second subnode must be the index to retrieve from the list.</li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>The i'th value from the list, or "" if there is not value at that index</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>listget</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- gets the index 1 of the list someList --&gt;
								&lt;listget&gt;
								&lt;get name="someList"/&gt;
								&lt;const value="1"/&gt;
							&lt;/listget&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot><a name="listset"></a>|listset</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets the value of a element in a list by its index.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>The first subnode must be the list to modify.</li>
                            <li>The second subnode is the index to replace.</li>
                            <li>The third subnode is the value to insert at the index.</li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>listset</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- sets the index 1 of the list someList to the value somevalue --&gt;
								&lt;listset&gt;
								&lt;get name="someList"/&gt;
								&lt;const value="1"/&gt;
								&lt;const value="somevalue"/&gt;
							&lt;/listset&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot><a name="|prop"></a>|prop</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Represents a property or a cell in a table. The name is used to specify which one it represents.</p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: the name of the cell or property to be set.</li>
                            <li>format (optional): the formatting provided for the first parameter. The format to turn the subnode's value into a string.</li>
                            <li>comment (optional): a description of this node</li>
                        </ul>
                        <p>Subnodes:</p>
                        <ul>
                            <li>
                                <p>[string] The value for the cell/prop</p>
                            </li>
                            <li>[bool] (optional) the isDisabled state for the property/cell</li>
                            <li>[list of string] (optional) the itemSource  for dropdowns</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>prop</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Sets up a table if this is a new activity. --&gt;
								&lt;if&gt;
								&lt;condition&gt;
								&lt;isnewapp /&gt;
								&lt;/condition&gt;
								&lt;settable type="Schedule" dataitemid="Test_S1"&gt;
								&lt;prop name = "Duration" &gt;
								&lt;const value= "6" type="string" /&gt;
								&lt;/prop&gt;
								&lt;prop name = "Value" &gt;
								&lt;const value= "8" type="string" /&gt;
								&lt;/prop&gt;
								&lt;/settable&gt;
							&lt;/if&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot><a name="|propget"></a>|propget</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets a property on the loaded table. It only works within the context of the <a href="#|table">table</a> node.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: the name of the table's column (i.e., From, Druation, etc.).</li>
                            <li>prop: the property to set (Value, IsDisabled, ItemSource, or Message).</li>
                            <li> type (optional): the type the value is converted to before being returned.</li>
                            <li>failvalue (optional): the value to return if the DataItem's value fails to convert.</li>
                            <li>parseformatting (optional): Set to "true" if you want this node to be able to parse floating point values with thousand separators and currency symbols.</li>
                            <li>comment (optional): a description of this node.</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>propget</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;table type="Schedule" name="list" dataitemid="Test_S"&gt;
								propget prop="Value" name="AdjustmentType"&gt;
								&lt;get name = "list" /&gt;
								&lt;/propget&gt;
							&lt;/table&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot><a name="|propset"></a>|propset</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets a property on the loaded table. It only works within the context of the <a href="#|table">table</a> node.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: the name of the table's column (i.e., From, Duration, etc.).</li>
                            <li>prop: the property to set (Value, IsDisabled, ItemSource, or Message).</li>
                            <li>format (optional): the format to turn the subnode's value into a string.</li>
                            <li>comment (optional): a description of this node.</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>propset</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!--Sums a column and then sets a message if it is not 100--&gt;
								&lt;!--In this example the prop being set is Message of AdjustmentType. This will make a validation error appear under that property.--&gt;
								&lt;table type="Schedule" name="list" dataitemid="Test_S"&gt;
								&lt; propset prop="IsDisabled" name="AdjustmentType"&gt;
								&lt;get name = "list" /&gt;
								&lt;const value= "true" /&gt;
								&lt;/ propset &gt;
							&lt;/table&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot><a name="queryfee"></a>|queryfee</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Pulls data from the fees and expenses repository, which supports the following syntax:</p>
                        <p>&lt;queryfee dataitemid="dataitemid" type="type" option="option" year="year" index="index" /&gt;</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>type: (Optional) The type of fee to query. It defaults to Rider.</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>Rider: Queries a PPfA Lite file for a rider fee. The tc at the end of the dataitemid name indicates the FeatureProduct tc value to match on, and the export value of the data item indicates for the FeatureProduct, which FeatureOptProduct ProductCode to match on. The query also matches on the application Jurisdiction if specified in the PPfA.</li>
                                    <li>Policy: Queries a PPfA Lite file for a policy-level fee. The tc at the end of the dataitemid name indicates the Fee tc value to match under PolicyProduct. The query also matches on the application Jurisdiction if specified in the PPfA.</li>
                                    <li>
                                        <p>Fund: Queries a PPfA Lite file for a fund fee. The value of the data item indicates the Product Code or Carrier Code &amp; Product Code (in the form CarrierCode/ProductCode) of the fund to query. The query also matches on the application Jurisdiction if specified in the PPfA. If the index attribute is specified, the query finds the nth data item name starting with a specific prefix and ending with the product code (for instance, Initial_BLENDED) that has a non-zero allocation, and returns the fee value for that fund.</p>
                                    </li>
                                    <li>Commission: Queries a CST File for a commission fee. The value of the data item specifies the Commission Option to query. The query also matches on the application’s Jurisdiction, Age (using the Client_Age data item), commission schedule dates, and year specified.</li>
                                    <li>
                                        <p>CommissionBanding: Queries a CST File for a commission banding fee. The value of the data item specifies the Commission Option to query. The query also matches on the application’s Jurisdiction, Age (using the Client_Age data item), commission schedule dates, and year specified.</p>
                                    </li>
                                </ul>
                            </li>
                            <li>
                                <p>option: (Optional) The fee option to return. It defaults to Amount.</p>
                                <p>For PPfA Lite files, accepted values are: </p>
                                <ul>
                                    <li>Amount</li>
                                    <li>Frequency</li>
                                    <li>Description</li>
                                </ul>
                                <p>For CST files, several additional option values are available (the list of supported options is auto-completed when entering the queryfee rule in the designer).</p>
                            </li>
                            <li>year: (Optional) The fee year to query. The year attribute is optional for most query types but specifies the schedule or contract year if needed. It is required for PPfA Life fees that are defined in a schedule and for commission queries to specify the contract year. Some commission fee options (for instance, TrailRate) need the contract year and a rate number. In this case, the year must specify both (i.e., 2/4 for contract year 2, trail rate 4).</li>
                            <li>index: (Optional) The index attribute is optional for most query types, but specifies the fund index for fund queries. If the data items for fund allocations are all prefixed with a common value (for instance, Initial_) and end with the product code value (for instance, Initial_BLENDED), a queryfee rule with the index value can be used to return the fee for the nth fund (specified by the index) with a non-zero allocation or a value of "true" or "Yes," and returns the fee value for that fund. See Example 3.</li>
                            <li>failvalue: (Optional) The value to be returned if the fee is not found.</li>
                            <li>dataitemid: (Required) the DataItem's ID.</li>
                            <li>comment: (Optional) a description of this node.</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>queryfee</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- When the FLR_Fee_GMWB_215 data item changes, queries the associated rider for the 
										product code in that data item and stores the fee in the Disclosure_GMWB_Fee data item. --&gt;
										&lt;diset dataitemid="Disclosure_GMWB_Fee"&gt;
										&lt;queryfee dataitemid="FLR_Fee_GMWB_215" /&gt;
									&lt;/diset&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>queryfee</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- When the FLR_Fee_ME_1 data item changes, queries the associated policy fee and stores the fee in the Disclosure_ME_Fee data item. --&gt;
										&lt;diset dataitemid="Disclosure_ME_Fee"&gt;
										&lt;queryfee dataitemid="FLR_Fee_ME_1" type="Policy" /&gt;
									&lt;/diset&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 3</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>queryfee</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- When any data item names starting with Initial_ changes, queries the 2nd one with 
										a non-zero allocation  or a value of true or Yes, finds the product code in that data 
										item’s suffix (i.e., Initial_BLENDED) and stores the associated fee value in the Fund_
										Fee_Amount_2 data item. --&gt;
										&lt;block&gt;
										&lt;digetrange option="StartsWith" value="Initial_"&gt;&lt;/digetrange&gt;
										&lt;diset dataitemid="Fund_Fee_Amount2"&gt;
										&lt;queryfee dataitemid="Initial_" option="Amount" type="Fund" index="2" /&gt;
										&lt;/diset&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 4</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet>
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>queryfee</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- When the Client_Age or FLR_Fee_Commission_Option data item changes, queries the 
										matching commission amount based on the age and commission option and stores the fee 
										in the Disclosure_Commission data item. --&gt;
										&lt;block&gt;
										&lt;diget dataitemid="Client_Age" /&gt;
										&lt;diset dataitemid="Disclosure_Commission"&gt;
										&lt;queryfee dataitemid="FLR_Fee_Commission_Option" type="Commission" option="Amount" year="2" /&gt;
										&lt;/diset&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot><a name="rowpropget"></a>|rowpropget</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets a row property in a table.  This can only be used with Data Grid controls.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>IsVisible: gets whether the table row is visible. This is the only valid attribute.</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>rowpropget</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Sets the percent column  on a grid to zero for ones that are not visible. --&gt;
								&lt;table dataitemid="GRID_AB" name="list" type="Grid" list="SampleGrid2020"&gt;
								&lt;foreach name="tozero"&gt;
								&lt;where name="x"&gt;
								&lt;get name="list" /&gt;
								&lt;not&gt;
								&lt;rowpropget prop="IsVisible"&gt;
								&lt;get name="x" /&gt;
								&lt;/rowpropget&gt;
								&lt;/not&gt;
								&lt;/where&gt;
								&lt;cellset prop="Value" name="Percent"&gt;
								&lt;get name="tozero" /&gt;
								&lt;const value="0" /&gt;
								&lt;/cellset&gt;
								&lt;/foreach&gt;
							&lt;/table&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot><a name="rowpropset"></a>|rowpropset</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets a row property in a table. This can only be used with Data Grid controls.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>IsVisible: sets whether the table row is visible.  This is the only valid attribute.</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>rowpropset</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Hides any row if the Percent column is greater then 5 --&gt;
								&lt;table dataitemid="GRID_AB" name="list" type="Grid" list="SampleGrid2020"&gt;
								&lt;foreach name="tohide"&gt;
								&lt;where name="x"&gt;
								&lt;get name="list" /&gt;
								&lt;compare op="&amp;gt;"&gt;
								&lt;cellget prop="Value" name="Percent" type="double" failvalue="0" parseformatting="true"&gt;
								&lt;get name="x" /&gt;
								&lt;/cellget&gt;
								&lt;const value="5" /&gt;
								&lt;/compare&gt;
								&lt;/where&gt;
								&lt;rowpropset prop="IsVisible"&gt;
								&lt;get name="tohide" /&gt;
								&lt;const value="false" /&gt;
								&lt;/rowpropset&gt;
								&lt;/foreach&gt;
							&lt;/table&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|set</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets the passed node(s) to a named variable on the stack.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: (Required) the name of the variable to set</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single node to set as the variable's value</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>set</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Sets variableName = 4 --&gt;
										&lt;set name="variableName"&gt;
										&lt;const value="4"/&gt;
									&lt;/set&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>set</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- In order for the variable to be used in another if-statement it must
										first be declared outside of the if-statement. --&gt;
										&lt;block&gt;
										&lt;set name="message"&gt;
										&lt;const value="NONE" /&gt;
										&lt;/set&gt;
										&lt;set name="postmessage"&gt;
										&lt;const value="false" /&gt;
										&lt;/set&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="Individual_LastName" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/condition&gt;
										&lt;set name="postmessage"&gt;
										&lt;const value="true" /&gt;
										&lt;/set&gt;
										&lt;set name="message"&gt;
										&lt;const value="Individual Last Name is a required field" /&gt;
										&lt;/set&gt;
										&lt;/if&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;get name="postmessage" /&gt;
										&lt;/condition&gt;
										&lt;postmessage dataitemid="Individual_LastName"&gt;
										&lt;get name="message" /&gt;
										&lt;/postmessage&gt;
										&lt;else /&gt;
										&lt;removemessage dataitemid="Individual_LastName" /&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <MadCap:pageBreak />
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|setbackofficeformstate</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets the back office state of a form.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: (Required) either the name or the ID of the form depending on the option attribute</li>
                            <li>
                                <p>option: (Required) query by form name or by form number</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>Name</li>
                                    <li>Number</li>
                                </ul>
                            </li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single boolean value</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>setbackofficeformstate</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- displays the form --&gt;
								&lt;setbackofficeformstate name="formNumber" option="Number" &gt;
								&lt;const value="true"/&gt;
							&lt;/setbackofficeformstate&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|setcomboitems</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets the dropdown items of all comboboxes associated with the dataitemid.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>option: (Required) Either append the values to the end of the dropdown list or replace the values entirely.</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>append</li>
                                    <li>replace</li>
                                </ul>
                            </li>
                            <li>
                                <p>sourcetype: (Required) Source type of items - values or list.</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>list</li>
                                    <li>values</li>
                                </ul>
                            </li>
                            <li>dataitemid: (Required) the DataItem's ID</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>If the sourcetype attribute is "list" then there must be a single subnode that returns a list.</li>
                            <li>If the sourcetype attribute is "values" then the subnodes may be many values that will come to comprise a list.</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>setcomboitems</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!--  Item1, item2 and item3 is appended to the existing list. SourceType is "values" as we have used bunch of values. --&gt;
										&lt;setcomboitems dataitemid="somedataITem" option="append" sourcetype="values" &gt;
										&lt;const value="item1" /&gt;
										&lt;const value="item2" /&gt;
										&lt;const value="item3" /&gt;
									&lt;/setcomboitems&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>setcomboitems</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Current items of combo is replaced by items from "SomeList." SourceType is "list" as we have used list. --&gt;
										&lt;setcomboitems dataitemid="somedataITem" option="replace" sourcetype="list" &gt;
										&lt;get name="SomeList"/&gt;
									&lt;/setcomboitems&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 3</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>setcomboitems</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Changes the sources of funds dropdown based on the funding type selected --&gt;
										&lt;block&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="PlanType_NonQualified" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;/condition&gt;
										&lt;setcontrolstate dataitemid="PlanType_Source_of_Funds"&gt;
										&lt;const value="true" /&gt;
										&lt;/setcontrolstate&gt;
										&lt;setcomboitems dataitemid="PlanType_Source_of_Funds" option="replace" sourcetype="values"&gt;
										&lt;const value="" /&gt;
										&lt;const value="Check/Money Order" /&gt;
										&lt;const value="One Time EFT" /&gt;
										&lt;const value="Internal 1035 Exchange from a Life Insurance Policy" /&gt;
										&lt;const value="Internal 1035 Exchange from a Non-Qualified Annunity" /&gt;
										&lt;const value="External 1035 Exchange from a Life Insurance Policy or Non-Qualified Annunity" /&gt;
										&lt;const value="Excess Contribution" /&gt;
										&lt;/setcomboitems&gt;
										&lt;/if&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="PlanType_IRA" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;/condition&gt;
										&lt;setcontrolstate dataitemid="PlanType_Source_of_Funds"&gt;
										&lt;const value="true" /&gt;
										&lt;/setcontrolstate&gt;
										&lt;setcomboitems dataitemid="PlanType_Source_of_Funds" option="replace" sourcetype="values"&gt;
										&lt;const value="" /&gt;
										&lt;const value="Check/Money Order" /&gt;
										&lt;const value="One Time EFT" /&gt;
										&lt;const value="Direct IRA Rollover" /&gt;
										&lt;const value="Indirect IRA Rollover" /&gt;
										&lt;const value="Internal Qualified Funds Transfer" /&gt;
										&lt;const value="External Qualified Funds Transfer" /&gt;
										&lt;const value="Excess Contribution" /&gt;
										&lt;const value="Recharacterization" /&gt;
										&lt;/setcomboitems&gt;
										&lt;/if&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="PlanType_RothIRA" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;/condition&gt;
										&lt;setcontrolstate dataitemid="PlanType_Source_of_Funds"&gt;
										&lt;const value="true" /&gt;
										&lt;/setcontrolstate&gt;
										&lt;setcomboitems dataitemid="PlanType_Source_of_Funds" option="replace" sourcetype="values"&gt;
										&lt;const value="" /&gt;
										&lt;const value="Check/Money Order" /&gt;
										&lt;const value="One Time EFT" /&gt;
										&lt;const value="Direct IRA Rollover" /&gt;
										&lt;const value="Indirect IRA Rollover" /&gt;
										&lt;const value="Internal Qualified Funds Transfer" /&gt;
										&lt;const value="External Qualified Funds Transfer" /&gt;
										&lt;const value="Recharacterization" /&gt;
										&lt;/setcomboitems&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|setcontrolrangestate</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets the control's state of many fields with similar tag names all at once.</p>
                        <p><b>DEPRECATED: NOT FOR NEW FORMS DEVELOPMENT!</b> The tags that operate on a range of fields at once are hard to debug, and the rules that use them are difficult to search for.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>clearondisable: (Optional) Set to True if you want the DataItem to be cleared of all value when controls are disabled</li>
                            <li>value: (Required) The partial string of a DataItemId to search for</li>
                            <li>
                                <p>option: The type of comparison to search with</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>Startswith</li>
                                    <li>Endswith</li>
                                    <li>Contains</li>
                                </ul>
                            </li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single boolean subnode</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>setcontrolrangestate</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Enables all of the controls associated with the dataitemid that starts with 'someD' --&gt;
								&lt;setcontrolrangestate value="someD" option="StartsWith"&gt;
								&lt;const value="true"/&gt;
							&lt;/setcontrolrangestate&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|setcontrolstate</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Enables or disables (grays out) a field.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>dataitemid: (Required) the id of the DataItem to change the control state of</li>
                            <li>clearondisable: (Optional) Set to True if you want the DataItem to be cleared of all value when controls are disabled</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single boolean value: True to enable the form, False to disable</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>setcontrolstate</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Enables all the controls associated with the dataitemid --&gt;
										&lt;setcontrolstate dataitemid="somedataITem" &gt;
										&lt;const value="true"/&gt;
									&lt;/setcontrolstate&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>setcontrolstate</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Enables or disables Non-Qualified funding options depending on the
										product name. --&gt;
										&lt;block&gt;
										&lt;setcontrolstate dataitemid="PlanType_NonQualified" clearondisable="true"&gt;
										&lt;or&gt;
										&lt;ismatch regex="960"&gt;
										&lt;diget dataitemid="FLI_PRODUCT_NAME" /&gt;
										&lt;/ismatch&gt;
										&lt;ismatch regex="965"&gt;
										&lt;diget dataitemid="FLI_PRODUCT_NAME" /&gt;
										&lt;/ismatch&gt;
										&lt;ismatch regex="980"&gt;
										&lt;diget dataitemid="FLI_PRODUCT_NAME" /&gt;
										&lt;/ismatch&gt;
										&lt;ismatch regex="981"&gt;
										&lt;diget dataitemid="FLI_PRODUCT_NAME" /&gt;
										&lt;/ismatch&gt;
										&lt;/or&gt;
										&lt;/setcontrolstate&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|setdataentryvisibility</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets the visibility of forms or wizards within data entry.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>setdataentryvisibility</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Shows or hides the forms or wizards within data entry. Duty will still be obeyed when printing. --&gt;
								&lt;setdataentryvisibility&gt;
								&lt;const value="true"/&gt;
								&lt;getallforms /&gt;
							&lt;/setdataentryvisibility&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|setformstate</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets the state of a form - displays or hides the form. Only effects forms that are set in the package as "Conditional" or "Input Only Conditional." Each rule may only trigger one form at a time otherwise it will fail silently; however, a single rule may trigger multiple copies of the same form.</p>
                        <p>When triggering multiple copies the first copy has its original form number. For additional forms the copy number is appended to the end of the form number.</p>
                        <p>When troubleshooting why the form is not displaying in the application check the following things:</p>
                        <ul>
                            <li>Is the form in the package?</li>
                            <li>Is the form in the package as "Conditional" or "Input Only Conditional"?</li>
                            <li>Is the form approved for the correct states?</li>
                        </ul>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: (Required) the form number - not the form name</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single subnode: True to trigger the form, or false to un-trigger the form</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>setformstate</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;setformstate name="formNumber" &gt;
										&lt;const value="true"/&gt;
									&lt;/setformstate&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>setformstate</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Triggers up to 10 copies of a form based on the value of a dropdown --&gt;
										&lt;block&gt;
										&lt;set name="sum" type="Int32"&gt;
										&lt;diget dataitemid="Source_Of_Funds_External1035_Forms" type="Int32" failvalue="0" /&gt;
										&lt;/set&gt;
										&lt;setformstate name="Letter-3 1-15 Common"&gt;
										&lt;compare op="&amp;gt;="&gt;
										&lt;get name="sum" /&gt;
										&lt;const value="1" type="Int32" /&gt;
										&lt;/compare&gt;
										&lt;/setformstate&gt;
										&lt;setformstate name="Letter-3 1-15 Common2"&gt;
										&lt;compare op="&amp;gt;="&gt;
										&lt;get name="sum" /&gt;
										&lt;const value="2" type="Int32" /&gt;
										&lt;/compare&gt;
										&lt;/setformstate&gt;
										&lt;setformstate name="Letter-3 1-15 Common3"&gt;
										&lt;compare op="&amp;gt;="&gt;
										&lt;get name="sum" /&gt;
										&lt;const value="3" type="Int32" /&gt;
										&lt;/compare&gt;
										&lt;/setformstate&gt;
										&lt;setformstate name="Letter-3 1-15 Common4"&gt;
										&lt;compare op="&amp;gt;="&gt;
										&lt;get name="sum" /&gt;
										&lt;const value="4" type="Int32" /&gt;
										&lt;/compare&gt;
										&lt;/setformstate&gt;
										&lt;setformstate name="Letter-3 1-15 Common5"&gt;
										&lt;compare op="&amp;gt;="&gt;
										&lt;get name="sum" /&gt;
										&lt;const value="5" type="Int32" /&gt;
										&lt;/compare&gt;
										&lt;/setformstate&gt;
										&lt;setformstate name="Letter-3 1-15 Common6"&gt;
										&lt;compare op="&amp;gt;="&gt;
										&lt;get name="sum" /&gt;
										&lt;const value="6" type="Int32" /&gt;
										&lt;/compare&gt;
										&lt;/setformstate&gt;
										&lt;setformstate name="Letter-3 1-15 Common7"&gt;
										&lt;compare op="&amp;gt;="&gt;
										&lt;get name="sum" /&gt;
										&lt;const value="7" type="Int32" /&gt;
										&lt;/compare&gt;
										&lt;/setformstate&gt;
										&lt;setformstate name="Letter-3 1-15 Common8"&gt;
										&lt;compare op="&amp;gt;="&gt;
										&lt;get name="sum" /&gt;
										&lt;const value="8" type="Int32" /&gt;
										&lt;/compare&gt;
										&lt;/setformstate&gt;
										&lt;setformstate name="Letter-3 1-15 Common9"&gt;
										&lt;compare op="&amp;gt;="&gt;
										&lt;get name="sum" /&gt;
										&lt;const value="9" type="Int32" /&gt;
										&lt;/compare&gt;
										&lt;/setformstate&gt;
										&lt;setformstate name="Letter-3 1-15 Common10"&gt;
										&lt;compare op="&amp;gt;="&gt;
										&lt;get name="sum" /&gt;
										&lt;const value="10" type="Int32" /&gt;
										&lt;/compare&gt;
										&lt;/setformstate&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <MadCap:pageBreak />
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|setformstatebyname</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>The same as &lt;setformstate&gt; except that the name attribute selects the form by form name instead of form number.</p>
                        <p>See the &lt;setformstate&gt; documentation for more information.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: (Required) the form name</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single subnode: True to trigger the form, or false to un-trigger the form</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>setformstatebyname</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;setformstate name="formNumber" &gt;
								&lt;const value="true"/&gt;
							&lt;/setformstate&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|setpackagestatebyname</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p><a name="setpackagestatebyname"></a>Enables or disables an entire package. Much like forms, packages can be triggered if they are set to "Conditional" in the Sales Agreement.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: The name of the package to trigger</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single value: True to enable the package, False to disable it</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>setpackagestatebyname</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- displays the form --&gt;
								&lt;setpackagestatebyname name="packagename"&gt;
								&lt;const value="true"/&gt;
							&lt;/setpackagestatebyname&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|setreadonly</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets if a control is read-only or not. In FireLight, each control has two different read-only settings: one is on the DataItem (controlled by &lt;setreadonly&gt;) and affects all fields with the same tag name, and the other is on the field properties (controlled in the field properties window) for each individual field. If either the DataItem setting or the field property setting is set to read only, then the field is read only.</p>
                        <table style="margin-left: 0;margin-right: auto;caption-side: top;">
                            <caption class="Table">Truth Table </caption>
                            <col style="width: 145px;" />
                            <col style="width: 179px;" />
                            <col style="width: 164px;" />
                            <thead>
                                <tr>
                                    <th>DataItemId</th>
                                    <th>Field Properties</th>
                                    <th>Is Read-Only</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>Read-Only</td>
                                    <td>Read-Only</td>
                                    <td>Read-Only</td>
                                </tr>
                                <tr>
                                    <td>Read-Only</td>
                                    <td>Not Read-Only</td>
                                    <td>Read-Only</td>
                                </tr>
                                <tr>
                                    <td>Not Read-Only</td>
                                    <td>Read-Only</td>
                                    <td>Read-Only</td>
                                </tr>
                                <tr>
                                    <td>Not Read-Only</td>
                                    <td>Not Read-Only</td>
                                    <td>Not Read-Only</td>
                                </tr>
                            </tbody>
                        </table>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>dataitemid: the DataItem's ID</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single value: True to make the field read only, False to make the field editable</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>setreadonly</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Enables all the controls associated with the dataitemid --&gt;
										&lt;setreadonly dataitemid="somedataITem" &gt;
										&lt;const value="true"/&gt;
									&lt;/setreadonly&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>setreadonly</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Copies Owner to Annuitant and makes Annuitant read-only if the Annuitant is the same as the Owner. --&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;compare op="=="&gt;
										&lt;diget dataitemid="Annuitant_SameAs_Owner" /&gt;
										&lt;const value="Yes" /&gt;
										&lt;/compare&gt;
										&lt;/condition&gt;
										&lt;diset dataitemid="Annuitant_FirstName"&gt;
										&lt;diget dataitemid="Owner_FirstName" /&gt;
										&lt;/diset&gt;
										&lt;setreadonly dataitemid="Annuitant_FirstName"&gt;
										&lt;const value="true" type="Boolean" /&gt;
										&lt;/setreadonly&gt;
										&lt;diset dataitemid="Annuitant_MiddleName"&gt;
										&lt;diget dataitemid="Owner_MiddleName" /&gt;
										&lt;/diset&gt;
										&lt;setreadonly dataitemid="Annuitant_MiddleName"&gt;
										&lt;const value="true" type="Boolean" /&gt;
										&lt;/setreadonly&gt;
										&lt;diset dataitemid="Annuitant_LastName"&gt;
										&lt;diget dataitemid="Owner_LastName" /&gt;
										&lt;/diset&gt;
										&lt;setreadonly dataitemid="Annuitant_LastName"&gt;
										&lt;const value="true" type="Boolean" /&gt;
										&lt;/setreadonly&gt;
										&lt;else/&gt;
										&lt;setreadonly dataitemid="Annuitant_FirstName"&gt;
										&lt;const value="false" type="Boolean" /&gt;
										&lt;/setreadonly&gt;
										&lt;setreadonly dataitemid="Annuitant_MiddleName"&gt;
										&lt;const value="false" type="Boolean" /&gt;
										&lt;/setreadonly&gt;
										&lt;setreadonly dataitemid="Annuitant_LastName"&gt;
										&lt;const value="false" type="Boolean" /&gt;
										&lt;/setreadonly&gt;
									&lt;/if&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|setreadonlyrange</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets each matching DataItem read-only all at once.</p>
                        <p><b>DEPRECATED: NOT FOR NEW FORMS DEVELOPMENT!</b> The tags that operate on a range of fields at once are hard to debug, and the rules that use them are difficult to search for.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>value: (Required) The partial string of a DataItemId to search for</li>
                            <li>
                                <p>option: The type of comparison to search with</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>StartsWith</li>
                                    <li>EndsWith</li>
                                    <li>Contains</li>
                                </ul>
                            </li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single boolean subnode</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>setreadonlyrange</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Enables all of the controls associated with the dataitemid that starts with 'someD' option can be: StartsWith,  EndsWith, Contains --&gt;
								&lt;setreadonlyrange value="someD" option="StartsWith"&gt;
								&lt;const value="true"/&gt;
							&lt;/setreadonlyrange&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|setrowvisibility</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets the visibility of a data grid row.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>dataitemId: The ID of the Data Grid</li>
                            <li>key: The ID of the column to match (which also matches the Custom List column)</li>
                            <li>value: The mapped string value of the Data Grid cell for the row that should be hidden</li>
                            <li>comment:  (Optional) a description of this node</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>showrowvisibility</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!--Shows or hides the row within a data grid.--&gt;
								&lt;setrowvisibility dataitemid="gridId" key="columnId" value="rowvalue"&gt;
								&lt;const value="true"/&gt;
							&lt;/setrowvisibility&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot><a name="|settable"></a>|settable</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Used to initialize or set a table to have values in just one row.  </p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>type: the Type of schedule options is Schedule or Grid</p>
                            </li>
                            <li>dataitemid: The DataItem that holds the schedule or grid, i.e., the name of the schedule</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>settable</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Sets up a table if it is a new app. --&gt;
								&lt;if&gt;
								&lt;condition&gt;
								&lt;isnewapp /&gt;
								&lt;/condition&gt;
								&lt;settable type="Schedule" dataitemid="Test_S"&gt;
								&lt;prop name="Duration" &gt;
								&lt;const value="6"  type="string" /&gt;
								&lt;/prop&gt;
								&lt;prop name="Value" &gt;
								&lt;const value="8" type="string" /&gt;
								&lt;/prop&gt;
								&lt;/settable&gt;
							&lt;/if&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot><a name="setvisibility"></a>|setvisibility</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Makes the field invisible or visible on the form. If a field is invisible it also will not show up on the printed form.</p>
                        <p>If a signature is invisible then it will not be signed in the signing ceremony.</p>
                        <p>If a field is invisible, that does not mean it is disabled: the control state of the field will not change unless also modified by &lt;setcontrolstate&gt;. Invisible fields will also retain their value.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>dataitemid: the DataItem's ID</li>
                            <li>clearonhidden: (Optional) true if you want the DataItem to be cleared of all values when controls are hidden</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single value: True to make the field visible, False to make the field invisible</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>setvisibility</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Enables all the controls associated with the dataitemid --&gt;
										&lt;setvisibility dataitemid="somedataitem" &gt;
										&lt;const value="true"/&gt;
									&lt;/setvisibility&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>setvisibility</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Makes Agent 2 field invisible if there is no Agent 2 --&gt;
										&lt;block&gt;
										&lt;set name="EnableAgent2"&gt;
										&lt;condition&gt;
										&lt;compare op="=="&gt;
										&lt;const value="Yes" /&gt;
										&lt;diget dataitemid="Feature_Commisions" /&gt;
										&lt;/compare&gt;
										&lt;/condition&gt;
										&lt;/set&gt;
										&lt;setvisibility dataitemid="AdditionalAgent_Label"&gt;
										&lt;get name="EnableAgent2" /&gt;
										&lt;/setvisibility&gt;
										&lt;setvisibility dataitemid="AdditionalAgent_IDNumber"&gt;
										&lt;get name="EnableAgent2" /&gt;
										&lt;/setvisibility&gt;
										&lt;setvisibility dataitemid="AdditionalAgent_LastName"&gt;
										&lt;get name="EnableAgent2" /&gt;
										&lt;/setvisibility&gt;
										&lt;setvisibility dataitemid="AdditionalAgent_FirstName"&gt;
										&lt;get name="EnableAgent2" /&gt;
										&lt;/setvisibility&gt;
										&lt;setvisibility dataitemid="AdditionalAgent_MiddleName"&gt;
										&lt;get name="EnableAgent2" /&gt;
										&lt;/setvisibility&gt;
										&lt;setvisibility dataitemid="AdditionalAgent_Label2"&gt;
										&lt;get name="EnableAgent2" /&gt;
										&lt;/setvisibility&gt;
										&lt;setvisibility dataitemid="AdditionalAgent_CredentialMFAAFA"&gt;
										&lt;get name="EnableAgent2" /&gt;
										&lt;/setvisibility&gt;
										&lt;setvisibility dataitemid="AdditionalAgent_Credentials"&gt;
										&lt;get name="EnableAgent2" /&gt;
										&lt;/setvisibility&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 3</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>setvisibility (clearonhidden)</MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- When the "chko" checkbox is selected, it hides the "pnl1" panel --&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;compare op="=="&gt;
										&lt;diget dataitemid="chko" /&gt;
										&lt;const value="true" /&gt;
										&lt;/compare&gt;
										&lt;/condition&gt;
										&lt;setvisibility dataitemid="pnl1" clearonhidden="true"&gt;
										&lt;const value="false" /&gt;
										&lt;/setvisibility&gt;
										&lt;else /&gt;
										&lt;setvisibility dataitemid="pnl1"&gt;
										&lt;const value="true" /&gt;
										&lt;/setvisibility&gt;
									&lt;/if&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|setvisibilityrange</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets each matching DataItem invisible all at once.</p>
                        <p><b>DEPRECATED: NOT FOR NEW FORMS DEVELOPMENT!</b> The tags that operate on a range of fields at once are hard to debug, and the rules that use them are difficult to search for.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>value: (Required) The partial string of a DataItemId to search for</li>
                            <li>
                                <p>option: The type of comparison to search with</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>StartsWith</li>
                                    <li>EndsWith</li>
                                    <li>Contains</li>
                                </ul>
                            </li>
                            <li>clearonhidden: (Optional) true if you want the DataItem to be cleared of all values when controls are hidden</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single boolean subnode</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>setvisibilityrange</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Enables all of the controls associated with the dataitemid that starts with 'someD' option can be :  StartsWith,  EndsWith, Contains --&gt;
								&lt;setvisibilityrange value="someD" option="StartsWith"&gt;
								&lt;const value="true"/&gt;
							&lt;/setvisibilityrange&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|signatureinfo:</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>References the signer and other information within a Review Queue script. This node acts like a diget for signature information.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>SignerType: The display name of the signer type.</li>
                            <li>
                                <p>Name: The information to display. </p>
                                <p>Name properties can be:</p>
                                <ul>
                                    <li>Exists</li>
                                    <li>ObtainedDate</li>
                                    <li>StateCode</li>
                                    <li>StateAbbrev</li>
                                    <li>City</li>
                                    <li>SignerName</li>
                                    <li>ClientEmail</li>
                                    <li>ClientName</li>
                                    <li>RequestCreateDate</li>
                                    <li>AgentEmail</li>
                                    <li>AgentName</li>
                                    <li>SignerType</li>
                                </ul>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>signatureinfo</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Reference the signer type and issue state abbreviation within a Review Queue script --&gt;
							&lt;signatureinfo signertype=“Agent” name=“StateAbbrev” /&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot><a name="|table"></a>|table</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Extracts and then sets a table based in the manipulation of it inside this node. </p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: the DataItem that holds the schedule or grid, i.e., the name of the schedule</li>
                            <li>type: the Type of schedule options is Schedule ExpandedSchedule, or Grid</li>
                            <li>list: The name of the list for the grid</li>
                            <li>dataitemid: the DataItem that holds the schedule or grid</li>
                            <li>comment (optional): a description of this node</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>table</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!--Sums a column and then sets a message if  not 100--&gt;
								&lt;table type="Schedule" name="list" dataitemid="Test_S"&gt;
								&lt;if&gt;
								&lt;condition&gt;
								&lt;compare op = "!=" &gt;
								&lt;sum&gt;
								&lt;select name="prop"&gt;
								&lt;get name = "list" /&gt;
								&lt;cellget prop="Value" name="Adjustment" type="double" failvalue="0" parseformatting="true"&gt;
								&lt;get name = "prop" /&gt;
								&lt;/cellget&gt;
								&lt;/select&gt;
								&lt;/sum&gt;
								&lt;const value= "100.0" /&gt;
								&lt;/compare&gt;
								&lt;/condition&gt;
								&lt;propset prop="Message" name="AdjustmentType"&gt;
								&lt;get name = "list" /&gt;
								&lt;const value= "Adjustment must sum to 100. Not really a valid example." /&gt;
								&lt;/ propset &gt;
								&lt;/if&gt;
							&lt;/table&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.Online"><a href="#top">Return to Top</a>
                </p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p MadCap:conditions="General.PDF">&#160;</p>
        <h2 MadCap:conditions="General.PDF"><a name="List"></a>|List</h2>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:conditionalText MadCap:conditions="General.Online">
                    <MadCap:dropDownHotspot><a name="ListOnline"></a>|List</MadCap:dropDownHotspot>
                </MadCap:conditionalText>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|foreach</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>
                            <img src="../../Resources/ImagesAdmin/TipIcon.jpg" alt="Tip Icon" title="" /> See <MadCap:xref href="#foreach" alt="foreach">|foreach</MadCap:xref> in the  Control category for a detailed description of the foreach node.</p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot><a name="length"></a>|length</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets the length of a string or a collection.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single subnode: either a string or a list</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>Int32</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>length</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns 7 --&gt;
										&lt;length&gt;
										&lt;list type="Int32"&gt;
										&lt;const value="0" /&gt;
										&lt;const value="1" /&gt;
										&lt;const value="2" /&gt;
										&lt;const value="3" /&gt;
										&lt;const value="4" /&gt;
										&lt;const value="5" /&gt;
										&lt;const value="6" /&gt;
										&lt;/list&gt;
									&lt;/length&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>length</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Separates a product name like "801 - Life Paid - Up at Age 100" into
										number and description. --&gt;
										&lt;block&gt;
										&lt;diset dataitemid="Plan_Description"&gt;
										&lt;substring&gt;
										&lt;diget dataitemid="FLI_PRODUCT_NAME" /&gt;
										&lt;const value="6" /&gt;
										&lt;math op="-"&gt;
										&lt;length&gt;
										&lt;diget dataitemid="FLI_PRODUCT_NAME" /&gt;
										&lt;/length&gt;
										&lt;const value="6" type="Int32" /&gt;
										&lt;/math&gt;
										&lt;/substring&gt;
										&lt;/diset&gt;
										&lt;diset dataitemid="Plan_Code"&gt;
										&lt;substring&gt;
										&lt;diget dataitemid="FLI_PRODUCT_NAME" /&gt;
										&lt;const value="0" /&gt;
										&lt;const value="3" /&gt;
										&lt;/substring&gt;
										&lt;/diset&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|list</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Returns a list of values returned by its subnodes.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>type: (Optional) The Type that the List will use for the items is added to it. Defaults to Objects.</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>Int16</li>
                                    <li>Int32</li>
                                    <li>Int64</li>
                                    <li>Single</li>
                                    <li>Double</li>
                                    <li>DateTime</li>
                                    <li>Boolean</li>
                                    <li>Guid</li>
                                    <li>String</li>
                                </ul>
                            </li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>One subnode for each element in the list</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>A list with elements of type determined by the type attribute</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>list</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns an empty list --&gt;
									&lt;list /&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>list</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns a list with one element --&gt;
										&lt;list&gt;
										&lt;const value="someValue"/&gt;
									&lt;/list&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|listadd</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Adds a value to the end of a list.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>The first subnode must be the list to modify.</li>
                            <li>The second subnode must be the value to append to the list.</li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>The length of the modified list</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>listadd</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- adds 3 to someList --&gt;
								&lt;listadd&gt;
								&lt;get name="someList"/&gt;
								&lt;const value="3"/&gt;
							&lt;/listadd&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|listcontains</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Searches a list to see if a value is contained within the list.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>The first subnode must be the list to search.</li>
                            <li>The second subnode must be the value to search for.</li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>A boolean: True if the value is in the list, false otherwise</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>listcontains</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns a boolean stating if someList contains 3 --&gt;
								&lt;listcontains&gt;
								&lt;get name="someList"/&gt;
								&lt;const value="3"/&gt;
							&lt;/listcontains&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|listfirstordefault</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Retrieves either the first value or the default value from a list. Does not modify the list.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single subnode: the list which you want the first value from</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>The first item in the list or the default value if the list is empty or the first value cannot be retrieved. The default value returned depends on the type of the list. The type of the list can be set with the type attribute when the list is created. </p>
                                <ul>
                                    <li>
                                        <p>String, Object: ""</p>
                                    </li>
                                    <li>
                                        <p>Int16, Int32, In64: 0</p>
                                    </li>
                                    <li>
                                        <p>Single, Double: 0</p>
                                    </li>
                                    <li>
                                        <p>DateTime: 1/1/0001 12:00:00 AM</p>
                                    </li>
                                    <li>
                                        <p>Guid: 00000000-0000-0000-0000-000000000000</p>
                                    </li>
                                    <li>
                                        <p>Boolean: False</p>
                                    </li>
                                </ul>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>listfirstordefault</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;listfirstordefault&gt;
								&lt;get name="someList"/&gt;
							&lt;/listfirstordefault&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|listget</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>
                            <img src="../../Resources/ImagesAdmin/TipIcon.jpg" alt="Tip Icon" title="" /> See <MadCap:xref href="#listget" alt="listget">|listget</MadCap:xref> in the GetSet category for a detailed description of the listget node.</p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|listremove</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Removes the element at the given index from the list.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>The first subnode must be the list to modify.</li>
                            <li>The second subnode must be the index to remove from the list.</li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>listremove</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- removes index 3 from someList --&gt;
								&lt;listremove&gt;
								&lt;get name="someList"/&gt;
								&lt;const value="3"/&gt;
							&lt;/listremove&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|listremoveitem</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Removes a value at the specified index from a list.</p><b class="DRNumberBold">About</b>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>IList</li>
                            <li>Object</li>
                        </ol>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>listremoveitem</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- removes item 3 from someList --&gt;
								&lt;listremoveitem&gt;
								&lt;get name="someList"/&gt;
								&lt;const value="3"/&gt;
							&lt;/listremoveitem&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|listset</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>
                            <img src="../../Resources/ImagesAdmin/TipIcon.jpg" alt="Tip Icon" title="" /> See <MadCap:xref href="#listset" alt="listget">|listset</MadCap:xref> in the GetSet  category for a detailed description of the listset node.</p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead><a name="|select"></a>
                        <MadCap:dropDownHotspot>|select</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Allows Selection and transformation of data in a list. It goes through the list and lets the second parameter change it, i.e., return a column in a row or modify a number.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>name: the local variable name where the current item in the list is placed.</p>
                            </li>
                            <li>comment (optional): a description of this node.</li>
                        </ul>
                        <p>Subnodes:</p>
                        <ul>
                            <li>A list</li>
                            <li>The transformation. The result of this is stored in the list that is returned by the node. It can access the current item stored in name.</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>select</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!--Returns a list of the same size where all items are less or equal to 5--&gt;
								&lt;select name="x"&gt;
								&lt;get name = "List of Integers" /&gt;
								&lt; max &gt;
								&lt;const value= "5" /&gt;
								&lt; get name="x"/&gt;
								&lt;/max&gt;
							&lt;/select&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead><a name="|where"></a>
                        <MadCap:dropDownHotspot>|where</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Reduces a list based on the condition. First node is the list to be reduced, and its value is put in an item specified by name. Second node must return a Boolean.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: the local variable name where the current item in the list is placed.</li>
                            <li>comment (optional): a description of this node.</li>
                        </ul>
                        <p>Subnodes:</p>
                        <ul>
                            <li>A list.</li>
                            <li>The node with returns if the current item is added. It can access the current item stored in name.</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>where</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!--returns a potential smaller list that only has numbers greater then 5--&gt;
								&lt;where name="x"&gt;
								&lt;get name = "List of Integers" /&gt;
								&lt; compare op="&amp;gt;" &gt;
								&lt;get name = "x" /&gt;
								&lt;const value= "5" /&gt;
								&lt;/ compare &gt;
							&lt;/ where &gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.Online"><a href="#top" alt="Return to Top">Return to Top</a>
                </p>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p MadCap:conditions="General.PDF">&#160;</p>
        <h2 MadCap:conditions="General.PDF"><a name="Math"></a>|Math</h2>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:conditionalText MadCap:conditions="General.Online">
                    <MadCap:dropDownHotspot>|Math</MadCap:dropDownHotspot>
                </MadCap:conditionalText>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|abs</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Returns the absolute value. The absolute value function ensures the number is not negative.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single number to take the absolute value of</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>The absolute value of the given number</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>abs</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns 3 --&gt;
								&lt;abs &gt;
								&lt;const value="-3"/&gt;
							&lt;/abs&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|fin</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Calls a financial calculation function.</p>
                        <p><b>DEPRECATED: NOT FOR NEW FORMS DEVELOPMENT!</b> As far as we know, &lt;fin&gt; has never been used. Contact Hexure for more information.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>op: (Required) The financial calculation function to call</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>Depends on the financial calculation</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>The result of the financial calculation</li>
                        </ul>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|math</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Performs the math operation on the given values.</p>
                        <p>If the subnodes are all integers then integer arithmetic is performed. When using integer arithmetic, the result value will always be a integer. If the result would otherwise return a non-integer number the result will always be rounded towards 0. For example 13/5 = 2.6 using non-integer math, but when using integer math 13/5 = 2. You can prevent integer math from occurring by ensuring at least one value is a Single or a Double.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>op: the math operation to perform</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>+ (add)</li>
                                    <li>- (subtract)</li>
                                    <li>* (multiply)</li>
                                    <li>/ (divide)</li>
                                    <li>% (modulo)</li>
                                </ul>
                            </li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>Two or more numbers to apply the math operation to. If there are more than two subnodes then the math operation is applied from top to bottom.</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>The result of the math operation</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>math</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns 8 --&gt;
										&lt;math op="-"&gt;
										&lt;const value="26" /&gt;
										&lt;const value="6" /&gt;
										&lt;const value="12" /&gt;
									&lt;/math&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>math</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Sets Math_Output to 2 --&gt;
										&lt;diset dataitemid="Math_Output"&gt;
										&lt;math op="/"&gt;
										&lt;const value="13" /&gt;
										&lt;const value="5" /&gt;
										&lt;/math&gt;
										&lt;/diset&gt;
										&lt;!-- Sets Math_Output to 2.6 --&gt;
										&lt;diset dataitemid="Math_Output"&gt;
										&lt;math op="/"&gt;
										&lt;const value="13" /&gt;
										&lt;const value="5.0" /&gt;
										&lt;/math&gt;
									&lt;/diset&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|max</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Returns the subnode with the largest (most positive) value.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>Two or more numbers to compare</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>The maximum value</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>max</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns 12 --&gt;
								&lt;max&gt;
								&lt;const value="-26" /&gt;
								&lt;const value="6" /&gt;
								&lt;const value="12" /&gt;
							&lt;/max&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|min</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Returns the subnode with the smallest (most negative) value.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>Two or more numbers to compare</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>The minimum value</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>min</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns -4 --&gt;
								&lt;min&gt;
								&lt;const value="-4" /&gt;
								&lt;const value="6" /&gt;
								&lt;const value="12" /&gt;
							&lt;/min&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|negate</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Negates the number, i.e., flips the sign of the number.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single number to negate</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>The number multiplied by -1</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>negate</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns -3 --&gt;
								&lt;negate &gt;
								&lt;const value="3"/&gt;
							&lt;/negate&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|power</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Takes the first parameter to the power of the second parameter.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>The first subnode is the base</li>
                            <li>The second subnode is the exponent</li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>The first node raised to the second node</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>power</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns 9 --&gt;
								&lt;power &gt;
								&lt;const value="3"/&gt;
								&lt;const value="2"/&gt;
							&lt;/power&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|round</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Rounds a decimal number according to the option and the digit.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>option: (Required) The type of rounding to perform</p>
                                <p>Accepted values:</p>
                                <ul>
                                    <li>Normal: normal rounding, .5 will round down, higher will round up</li>
                                    <li>Up: will always round up, .1 will result in 1 and -.9 will result in 0</li>
                                    <li>Down: will always round down, -.1 will result in -1 and .9 will result in 0</li>
                                    <li>AwayFromZero: will always round away from zero, -1.1 will result in -2 and 1.1 will result in 2</li>
                                    <li>TowardsZero: will always round towards zero, -1.7 will result in -1 and 1.6 will result in 1</li>
                                </ul>
                            </li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>The first subnode (Required) is the value to round. Must be a Double or a Single.</li>
                            <li>The second subnode (Required) is an integer that determines which decimal place is rounded. If this node is omitted then it will round to the appropriate integer.</li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>The rounded number as a Double.</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>round</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns 3.2 --&gt;
										&lt;round option="Normal"&gt;
										&lt;!-- number to be rounded --&gt;
										&lt;const value="3.2323"/&gt; 
										&lt;!-- digits (optional): how many digits to round to --&gt;
										&lt;const value="1"/&gt; 
										&lt;/round&gt;
										&#160;
										&lt;!-- Returns 33.13 --&gt;
										&lt;round option="AwayFromZero"&gt;
										&lt;const value="33.1212" /&gt;
										&lt;const value="2" /&gt;
									&lt;/round&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>round</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- calculates the nearest birthday of the insured --&gt;
										&lt;block&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;not&gt;
										&lt;isnull&gt;
										&lt;diget dataitemid="Insured_DOBNEW" type="DateTime" /&gt;
										&lt;/isnull&gt;
										&lt;/not&gt;
										&lt;/condition&gt;
										&lt;set name="ageDays"&gt;
										&lt;datetimedifference option="Day"&gt;
										&lt;datetimenow /&gt;
										&lt;diget dataitemid="Insured_DOBNEW" type="DateTime" /&gt;
										&lt;/datetimedifference&gt;
										&lt;/set&gt;
										&lt;set name="age"&gt;
										&lt;round option="Normal"&gt;
										&lt;math op="/"&gt;
										&lt;get name="ageDays" /&gt;
										&lt;const value="365.25" type="Double" /&gt;
										&lt;/math&gt;
										&lt;/round&gt;
										&lt;/set&gt;
										&lt;diset dataitemid="Issue_Age"&gt;
										&lt;get name="age" /&gt;
										&lt;/diset&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|sum</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Calculates the sum of a list.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single subnode: a list</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>The sum of all elements in the given list</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>sum</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns the sum of the values in someList --&gt;
								&lt;sum&gt;
								&lt;get name="someList"/&gt;
							&lt;/sum&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p MadCap:conditions="General.PDF">&#160;</p>
        <h2 MadCap:conditions="General.PDF"><a name="Reflection"></a>|Reflection</h2>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:conditionalText MadCap:conditions="General.Online">
                    <MadCap:dropDownHotspot>|Reflection</MadCap:dropDownHotspot>
                </MadCap:conditionalText>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|rcall</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Calls a method of the subnode, passed by name. The method called must be defined on the context given to rcall and must have zero parameters.</p>
                        <p>See the C# documentation for String, Int32, DateTime etc. for a list of methods than can be called.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: (Required) the name of the method to call.</li>
                            <li>context: (Optional) the name of a variable to pull as the start of the property stack. If this attribute is not defined then the context is the single subnode passed into rcall.</li>
                            <li>comment: (Optional) a description of this node.</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>If the context attribute is used then the tag must be self-closed, if the context attribute is not used then a single subnode is required.</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>The result of the called method.</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>rcall</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">Both rcall nodes would return 'ALL LOWER CASE':
										&lt;rcall name="ToUpper"&gt;
										&lt;const value="all lower case" /&gt;
										&lt;/rcall&gt;
										OR
										&lt;set name="str"&gt;
										&lt;const value="all lower case" /&gt;
										&lt;/set&gt;
									&lt;rcall name="ToUpper" context="str" /&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2:</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>rcall</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns "Hello World!" --&gt;
										&lt;rcall name="Trim"&gt;
										&lt;const value="  Hello World! " type="String" /&gt;
									&lt;/rcall&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|rget</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets a property of the object.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: (Required) The property path. Supports indexors with @. Avoid using indexors with @ as they are slow and can throw errors.</li>
                            <li>context: (Optional) the name of a variable to pull as the start of the property stack. If this attribute is not defined then the context is the single subnode.</li>
                            <li>comment: (Optional) a description of this node.</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>If the context attribute is used then the tag must be self-closed, if the context attribute is not used then a single subnode is required.</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>The result of the calling the getter on the object.</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>rget</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">Both rget nodes would return 3.
										&lt;rget name="Length"&gt;
										&lt;const value="ABC" /&gt;
										&lt;/rget&gt;
										OR
										&lt;set name="str"&gt;
										&lt;const value="ABC" /&gt;
										&lt;/set&gt;
									&lt;rget name="Length" context="str" /&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>rget</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Uses an indexor with @. Avoid using this notation! --&gt;
										&lt;!-- Returns the 1st index of list: 2. --&gt;
										&lt;block&gt;
										&lt;set name="list" &gt;
										&lt;const value="1"/&gt;
										&lt;const value="2"/&gt;
										&lt;const value="3"/&gt;
										&lt;/set&gt;
										&lt;set name="index"&gt;
										&lt;const value="1"/&gt;
										&lt;/set&gt;
										&lt;rget name="[@index]" context="list" /&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|rset</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Sets a property of the object.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>name: (Required) The property path. Supports indexors with @. Avoid using indexors with @ as they are slow and can throw errors.</li>
                            <li>context: (Optional) the name of a variable to pull as the start of the property stack. If this attribute is not defined then the context is the single subnode.</li>
                            <li>comment: (Optional) a description of this node.</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>If the context attribute is used then the tag must be self-closed, if the context attribute is not used then a single subnode is required.</li>
                            <li>The value to be passed into the setter</li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>None</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>rset</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">Both rset nodes would set obj.MyProp to 1.
								&lt;!-- where obj is an object with the property MyProp --&gt;
								&lt;rset name="MyProp"&gt;
								&lt;get name="obj" /&gt;
								&lt;const value="1" /&gt;
								&lt;/rset&gt;
								OR
								&lt;rset name="MyProp" context="obj" &gt;
								&lt;const value="1" /&gt;
							&lt;/rset&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                        <p MadCap:conditions="General.Online"><a href="#top" alt="Return to Top">Return to Top</a>
                        </p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p MadCap:conditions="General.PDF">&#160;</p>
        <h2 MadCap:conditions="General.PDF"><a name="String"></a>|String</h2>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot>
                    <MadCap:conditionalText MadCap:conditions="General.Online">|String</MadCap:conditionalText>
                </MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|AddressInput</MadCap:dropDownHotspot><a name="AddressInput"></a>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Gets the associated data item and assigns it to the relevant input for USPS Address Validation.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes: </p>
                        <ul>
                            <li>type: the type of address input</li>
                            <li>dataitemid: the data item for this address input</li>
                            <li>dataitemid: the Data item's ID</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <p>&lt;AddressInput type='Address1' dataitemid='somedataItem'/&gt;</p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|AddressValidation</MadCap:dropDownHotspot><a name="AddressValidation"></a>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p class="note"><b class="Bold">NOTE:</b> This service is not Health Insurance Portability and Accountability Act (HIPAA) compliant. The integrations are configured so that we can disable them for an organization, which we will do if we enter into a HIPAA Business Associate Agreement (BAA) with the organization.</p>
                        <p>Will accomplish an API address validation on the indicated fields (requires Line1, and then City &amp; State OR Zip) and return the result as a string, optionally posting any failure details to the data item indicated (as a warning message).</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>dataitemid: This data item will receive any details from the address validation call as warning messages, and controls the popup that can occur for any recommended changes.</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>AddressValidation</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Will accomplish address validation on the indicated fields (requires Line1, and 
								then City &amp; State OR Zip) and return the result, optionally posting any failure details 
								to the data item indicated on the &lt;AddressValidation&gt; node --&gt;
								&lt;AddressValidation dataitemid='dataItemToPostDetailsAsWarningsTo'&gt;
								&lt;!--Line 1 street--&gt;
								&lt;AddressInput type = 'Address1' dataitemid='someDataItem line 1' /&gt;
								&lt;!--Line 2 street - optional--&gt;
								&lt;AddressInput type = 'Address2' dataitemid='someDataItem line 2' /&gt;
								&lt;!--City--&gt;
								&lt;AddressInput type = 'City' dataitemid='someDataItem_City' /&gt;
								&lt;!--State - will use first 2 characters of given value(abbreviations only)--&gt;
								&lt;AddressInput type = 'State' dataitemid='someDataItem_City' /&gt;
								&lt;!--zip - will use first 5 characters of given value--&gt;
								&lt;AddressInput type = 'Zip5' dataitemid='someDataItem_Zip' /&gt;
								&lt;/AddressValidation&gt;
								*Returns a string value based on the result of the call - 'success', 'fail', 'technicalFail', 'didNotRun'
								*success = the address was successfully validated
								*fail = the address failed validation
								*technicalFail = the API call to accomplish validation had a technical error
							*didNotRun = the API call did not occur, either due to insufficient data, or because the application was just loaded</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|concat</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Concatenates the subnodes together.</p>
                        <p>If you would like to add a newline use the HTML-escaped entity code for \n: &amp;#xA;.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>1 or more values that is turned into a string and concatenated</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>A string</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>concat</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns "this is a whole string" --&gt;
										&lt;concat&gt;
										&lt;const value="this is a w" /&gt;
										&lt;const value="hole string" /&gt;
									&lt;/concat&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>concat</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Sets the field FST-MQ-9_CONCAT with the question text and the applicant's response --&gt;
										&lt;block&gt;
										&lt;set name="message"&gt;
										&lt;const value="NONE" /&gt;
										&lt;/set&gt;
										&lt;set name="postmessage"&gt;
										&lt;const value="false" /&gt;
										&lt;/set&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;compare op="=="&gt;
										&lt;diget dataitemid="Insured_MedicalHistory_Consultation" /&gt;
										&lt;const value="Yes" type="String" /&gt;
										&lt;/compare&gt;
										&lt;/condition&gt;
										&lt;set name="postmessage"&gt;
										&lt;const value="true" /&gt;
										&lt;/set&gt;
										&lt;set name="message"&gt;
										&lt;concat&gt;
										&lt;const value="Were you advised that results of that consultation were outside normal ranges?" /&gt;
										&lt;const value="&amp;#xA;" /&gt;
										&lt;const value="&amp;#xA;" /&gt;
										&lt;const value="Details: " /&gt;
										&lt;diget dataitemid="Insured_MedicalHistory_Consultation_Details" /&gt;
										&lt;const value="&amp;#xA;" /&gt;
										&lt;const value="&amp;#xA;" /&gt;
										&lt;/concat&gt;
										&lt;/set&gt;
										&lt;/if&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;get name="postmessage" /&gt;
										&lt;/condition&gt;
										&lt;diset dataitemid="FST-MQ-9_CONCAT"&gt;
										&lt;get name="message" /&gt;
										&lt;/diset&gt;
										&lt;else /&gt;
										&lt;diset dataitemid="FST-MQ-9_CONCAT"&gt;
										&lt;const value="" /&gt;
										&lt;/diset&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|deformat</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Strips all characters except the characters specified.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>format: (Required) Determines what characters is kept:</p>
                                <ul>
                                    <li>'d' means digit</li>
                                    <li>'l' means letter</li>
                                    <li>' ' means whitespace</li>
                                    <li>Any other character is matched exactly</li>
                                </ul>
                            </li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single string</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>A string with all non-specified characters removed</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>deformat</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!--Returns "12 place with 1.2"--&gt;
										&lt;deformat option="dl ." &gt;
										&lt;const value="12, place with 1.2" /&gt;
									&lt;/deformat&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>deformat</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Pulls the number out of the product name and puts it in  a field --&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;deformat format="d"&gt;
										&lt;diget dataitemid="FLI_PRODUCT_NAME" /&gt;
										&lt;/deformat&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;/condition&gt;
										&lt;setreadonly dataitemid="Product_Term"&gt;
										&lt;const value="true" /&gt;
										&lt;/setreadonly&gt;
										&lt;diset dataitemid="Product_Term" &gt;
										&lt;deformat format="d"&gt;
										&lt;diget dataitemid="FLI_PRODUCT_NAME" /&gt;
										&lt;/deformat&gt;
										&lt;/diset&gt;
									&lt;/if&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|format</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Formats the subnodes with the provided format string. Works slightly differently than the format used in &lt;tostring&gt;. See the C# documentation for String.Format for more information.</p>
                        <p>When using format to format a number or a datetime make sure that the value passed in is actually a number or a datetime, otherwise it will appear that the format did not work.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>format: (Required) The Format to be passed the String.Format. This tag uses the {index[,alignment][:formatString]} syntax. Some example formats:</p>
                                <p>Numbers:</p>
                                <ul>
                                    <li>Format: {0:C} Input: 12.3 Result: $12.30</li>
                                    <li>Format: {0:0.0%} Input: 0.2368 Result: 23.7%</li>
                                    <li>Format: {0:N1}% Input: 23.68 Result: 23.7%</li>
                                    <li>Format: {0:n} Input: 3456556 Result: 3,456,556.00</li>
                                    <li>Format: {0:N2} Input: 31 Result: 31.00</li>
                                    <li>Format: {0:N1} Input: 31 Result: 31.0</li>
                                </ul>
                                <p>Dates:</p>
                                <ul>
                                    <li>Format: {0:dd/MM/yyyy} Input: 3/12/1974 Result: 12/03/1974</li>
                                    <li>Format: {0:D} Input: 3/12/1974 Result: Tuesday, March 12, 1974</li>
                                    <li>Format: {0:d} Input: 3/12/1974 Result: 3/12/1974</li>
                                </ul>
                            </li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>One or more values to be converted into a string and formatted</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>A formatted string</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>format</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns "1 to 10" --&gt;
										&lt;format format="{0} to {1}"&gt;
										&lt;const value="1" /&gt;
										&lt;const value="10" /&gt;
									&lt;/format&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>format</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Checks if a field is a numeric value and then formats it as 0.00 --&gt;
										&lt;block&gt;
										&lt;set name="message"&gt;
										&lt;const value="NONE" /&gt;
										&lt;/set&gt;
										&lt;set name="postmessage"&gt;
										&lt;const value="false" /&gt;
										&lt;/set&gt;
										&lt;diset dataitemid="Feature_Protection_Value" parseformatting="true"&gt;
										&lt;conditional&gt;
										&lt;isnull&gt;
										&lt;diget dataitemid="Feature_Protection_Value" type="Double" /&gt;
										&lt;/isnull&gt;
										&lt;diget dataitemid="Feature_Protection_Value" /&gt;
										&lt;format format="{0:N2}"&gt;
										&lt;diget dataitemid="Feature_Protection_Value" type="Double" /&gt;
										&lt;/format&gt;
										&lt;/conditional&gt;
										&lt;/diset&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="Feature_Protection_Value" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/condition&gt;
										&lt;set name="postmessage"&gt;
										&lt;const value="true" /&gt;
										&lt;/set&gt;
										&lt;set name="message"&gt;
										&lt;const value="Additional Protection Benefit is a required field." /&gt;
										&lt;/set&gt;
										&lt;/if&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;and&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="Feature_Protection_Value" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;not&gt;
										&lt;ismatch regex="^\$?(\d{1,3},?(\d{3},?)*\d{3}(\.\d{1,3})?|\d{1,3}(\.\d{2})?)$"&gt;
										&lt;diget dataitemid="Feature_Protection_Value" /&gt;
										&lt;/ismatch&gt;
										&lt;/not&gt;
										&lt;/and&gt;
										&lt;/condition&gt;
										&lt;set name="postmessage"&gt;
										&lt;const value="true" /&gt;
										&lt;/set&gt;
										&lt;set name="message"&gt;
										&lt;const value="Please enter numeric only." /&gt;
										&lt;/set&gt;
										&lt;/if&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;get name="postmessage" /&gt;
										&lt;/condition&gt;
										&lt;postmessage dataitemid="Feature_Protection_Value"&gt;
										&lt;get name="message" /&gt;
										&lt;/postmessage&gt;
										&lt;else /&gt;
										&lt;removemessage dataitemid="Feature_Protection_Value" /&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|ismatch</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Returns true if the subnode matches the given regular expression. Uses C# regular expressions. See the C# Regular Expression Reference for more information.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>
                                <p>regex: (Required) The regular expression to match</p>
                                <p>Some useful regular expressions:</p>
                                <ul>
                                    <li>
                                        <p>Matches a PO box address line</p>
                                        <p>^\s*(([Pp](OST|ost)?\.?\s*[Oo](ffice|FFICE)?\.?)?\s*([Bb][Oo][Xx])|([Pp](OST|ost)?\.?\s*[Oo](ffice|FFICE)?\.?)\s*([Bb][Oo][Xx])?)</p>
                                    </li>
                                    <li>
                                        <p>Matches a ZIP code:</p>
                                        <p>^\d{5}$|^\d{5}-\d{4}$</p>
                                    </li>
                                    <li>
                                        <p>Matches a US phone number:</p>
                                        <p>(^\(?\d{3}\)?(\s?|-)\d{3}-\d{4}$)|(^\d{10}$)</p>
                                    </li>
                                    <li>
                                        <p>Matches an e-mail address:</p>
                                        <p>^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,63}$</p>
                                    </li>
                                    <li>
                                        <p>Matches a SSN or EIN:</p>
                                        <p>(^(?!\b(\d)\1+-(\d)\1+-(\d)\1+\b)(?!123-45-6789|219-09-9999|078-05-1120)(?!666|000|9\d{2})\d{3}-(?!00)\d{2}-(?!0{4})\d{4}$)|(^\d{2}-\d{7}$)</p>
                                    </li>
                                    <li>
                                        <p>Matches an integer:</p>
                                        <p>^[0-9]+$</p>
                                    </li>
                                    <li>
                                        <p>Matches a number with commas and possibly a decimal point:</p>
                                        <p>^((\d{1,3}(,\d{3})*)|(\d+))(\.\d+)?$</p>
                                    </li>
                                    <li>
                                        <p>Matches a percentage between 1 and 100:</p>
                                        <p>^((\d{1,2}(\.\d+)?)|(100))%?$</p>
                                    </li>
                                </ul>
                            </li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single subnode: a string to match against</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>True if the regex matches the given value, false otherwise</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>ismatch</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns True --&gt;
										&lt;ismatch regex="^The"&gt;
										&lt;const value="The sentence is a match" /&gt;
									&lt;/ismatch&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>ismatch</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">
										&lt;!-- AnnuitantAdditionalBeneficiary2_MiddleName can only contain letters, numbers and hyphens --&gt;
										&lt;block&gt;
										&lt;set name="message"&gt;
										&lt;const value="NONE" /&gt;
										&lt;/set&gt;
										&lt;set name="postmessage"&gt;
										&lt;const value="false" /&gt;
										&lt;/set&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="AnnuitantAdditionalBeneficiary2_MiddleName" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;not&gt;
										&lt;ismatch regex="^[a-zA-Z0-9\s\-]+$"&gt;
										&lt;diget dataitemid="AnnuitantAdditionalBeneficiary2_MiddleName" type="String" /&gt;
										&lt;/ismatch&gt;
										&lt;/not&gt;
										&lt;/condition&gt;
										&lt;set name="postmessage"&gt;
										&lt;const value="true" /&gt;
										&lt;/set&gt;
										&lt;set name="message"&gt;
										&lt;const value="Field can only contain Alpha Characters and Hyphens." /&gt;
										&lt;/set&gt;
										&lt;/if&gt;
										&lt;if&gt;
										&lt;condition&gt;
										&lt;get name="postmessage" /&gt;
										&lt;/condition&gt;
										&lt;postmessage dataitemid="AnnuitantAdditionalBeneficiary2_MiddleName"&gt;
										&lt;get name="message" /&gt;
										&lt;/postmessage&gt;
										&lt;else /&gt;
										&lt;removemessage dataitemid="AnnuitantAdditionalBeneficiary2_MiddleName" /&gt;
										&lt;/if&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <MadCap:pageBreak />
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|isnullorwhitespace</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Returns true if the subnode is null or contains just white space characters. White space characters include (but is not limited to) spaces, tabs, and new lines.</p>
                        <p>It is recommended to use &lt;isnullorwhitespace&gt; for determining if a radio button is checked. A radio button's export value cannot be null or whitespace, and &lt;isnullorwhitespace&gt; is invariant to changes in the radio button's export value.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single subnode: a string to check</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>True if the given value is null or whitespace, false otherwise</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>isnullorwhitespace</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns the value is null or whitespace --&gt;
										&lt;isnullorwhitespace &gt;
										&lt;get name="value"/&gt;
									&lt;/isnullorwhitespace&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>isnullorwhitespace</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Checks to see if the Insured Child Activation radio button is checked or not --&gt;
										&lt;block&gt;
										&lt;set name="condition"&gt;
										&lt;not&gt;
										&lt;isnullorwhitespace&gt;
										&lt;diget dataitemid="Insured_Child_Name_Activation_Box" /&gt;
										&lt;/isnullorwhitespace&gt;
										&lt;/not&gt;
										&lt;/set&gt;
										&lt;setcontrolstate dataitemid="Insured_Child_Name" clearondisable="true"&gt;
										&lt;get name="condition" /&gt;
										&lt;/setcontrolstate&gt;
										&lt;setcontrolstate dataitemid="Insured_Child_Gender" clearondisable="true"&gt;
										&lt;get name="condition" /&gt;
										&lt;/setcontrolstate&gt;
										&lt;setcontrolstate dataitemid="Insured_Child_Height" clearondisable="true"&gt;
										&lt;get name="condition" /&gt;
										&lt;/setcontrolstate&gt;
										&lt;setcontrolstate dataitemid="Insured_Child_Weight" clearondisable="true"&gt;
										&lt;get name="condition" /&gt;
										&lt;/setcontrolstate&gt;
										&lt;setcontrolstate dataitemid="Insured_Child_TotalInsurance" clearondisable="true"&gt;
										&lt;get name="condition" /&gt;
										&lt;/setcontrolstate&gt;
										&lt;setcontrolstate dataitemid="Insured_Child_DOB" clearondisable="true"&gt;
										&lt;get name="condition" /&gt;
										&lt;/setcontrolstate&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|length</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>
                            <img src="../../Resources/ImagesAdmin/TipIcon.jpg" alt="Tip Icon" title="" /> See <MadCap:xref href="#length" alt="length">|length</MadCap:xref> in the List category for a detailed description of the length node.</p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|replacestring</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Returns a string with the old value replaced by the new value. Replaces all instances of the old value found in the string.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>The first subnode must be the string to modify</li>
                            <li>The second subnode is the old value/substring to search for</li>
                            <li>The third subnode is the new value/substring that will replace the old value</li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>A string where all occurrences of a string are replaced with another string</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>replacestring</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns the string "hello 33" --&gt;
								&lt;replacestring &gt;
								&lt;const value="hello 123" /&gt;
								&lt;const value="12" /&gt;
								&lt;const value="3" /&gt;
							&lt;/replacestring&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|splitstring</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Returns a string list containing substrings from the original string that were delimited by the specified separator.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>value: (Required) the separator delimiter, used to split the string</li>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>A single string to split apart</li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>A list containing the text between each delimiter</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet>
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>splitstring</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- 
								Returns a list:
								this
								is 
    
								a csv 
								--&gt;
								&lt;splitstring value=,"" &gt;
								&lt;const value="this,is,,a csv" /&gt;
							&lt;/splitstring&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|stringcontains</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>stringcontains</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns true --&gt;
								&lt;stringcontains&gt;
								&lt;const value="hi i am firelight" /&gt;
								&lt;const value="hi" /&gt;
							&lt;/stringcontains&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|stringindexof</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Retrieves an index of a value from the string. This can be combined with substring in order to split strings apart.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>The first subnode is the string to search within</li>
                            <li>The second subnode is a substring to search the first subnode for</li>
                            <li>The third subnode is the at what index to start searching (Optional)</li>
                            <li>The fourth subnode is how many characters after the start index to search</li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>The 0-based index position of the start of the search string, or -1 if the search string is not found</li>
                        </ul>
                        <p><b class="DRNumberBold">Examples</b>
                        </p>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>stringindexof</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;stringindexof&gt;
										&lt;const value="fullstring" /&gt; &lt;!-- value: what is being searched --&gt;
										&lt;const value="str" /&gt; &lt;!-- searchitem: what is being searched for --&gt;
										&lt;const value="0" /&gt; &lt;!--  startindex (optional): where to start searching--&gt;
										&lt;const value="10" /&gt; &lt;!--  count (optional): how many characters to search --&gt;
									&lt;/stringindexof&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                        <MadCap:dropDown>
                            <MadCap:dropDownHead>
                                <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                            </MadCap:dropDownHead>
                            <MadCap:dropDownBody>
                                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                                    <MadCap:codeSnippetCopyButton />
                                    <MadCap:codeSnippetCaption>
                                        <p>stringindexof</p>
                                    </MadCap:codeSnippetCaption>
                                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Edits the text with the first and second pipe character (|) and leaves any other user-entered text alone. --&gt;
										&lt;block&gt;
										&lt;set name="firstPipe"&gt;
										&lt;stringindexof&gt;
										&lt;diget dataitemid="PrimaryBeneficiary_Remarks" /&gt;
										&lt;const value="|" /&gt;
										&lt;/stringindexof&gt;
										&lt;/set&gt;
										&lt;set name="secondPipe"&gt;
										&lt;stringindexof&gt;
										&lt;diget dataitemid="PrimaryBeneficiary_Remarks" /&gt;
										&lt;const value="|" /&gt;
										&lt;math op="+"&gt;
										&lt;get name="firstPipe" /&gt;
										&lt;const value="1" /&gt;
										&lt;/math&gt;
										&lt;/stringindexof&gt;
										&lt;/set&gt;
										&lt;set name="first"&gt;
										&lt;substring&gt;
										&lt;diget dataitemid="PrimaryBeneficiary_Remarks" /&gt;
										&lt;const value="0" /&gt;
										&lt;get name="firstPipe" /&gt;
										&lt;/substring&gt;
										&lt;/set&gt;
										&lt;set name="last"&gt;
										&lt;substring&gt;
										&lt;diget dataitemid="PrimaryBeneficiary_Remarks" /&gt;
										&lt;math op="+"&gt;
										&lt;get name="secondPipe" /&gt;
										&lt;const value="1" /&gt;
										&lt;/math&gt;
										&lt;length&gt;
										&lt;diget dataitemid="PrimaryBeneficiary_Remarks" /&gt;
										&lt;/length&gt;
										&lt;/substring&gt;
										&lt;/set&gt;
										&lt;diset dataitemid="PrimaryBeneficiary_Remarks"&gt;
										&lt;concat&gt;
										&lt;get name="first" /&gt;
										&lt;const value="|" /&gt;
										&lt;const value=" Smoker Status: " /&gt;
										&lt;diget dataitemid="Smoker_Status" /&gt;
										&lt;const value="&amp;#xA;" /&gt;
										&lt;const value="  Spouse Smoker Status: " /&gt;
										&lt;diget dataitemid="Spouse_Smoker_Status" /&gt;
										&lt;const value=" |" /&gt;
										&lt;get name="last" /&gt;
										&lt;/concat&gt;
										&lt;/diset&gt;
									&lt;/block&gt;</MadCap:codeSnippetBody>
                                </MadCap:codeSnippet>
                            </MadCap:dropDownBody>
                        </MadCap:dropDown>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <MadCap:pageBreak />
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|substring</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Retrieves the substring starting at an index and continuing for n characters. Useful when paired with &lt;stringindexof&gt;.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ol>
                            <li>The first subnode is the string to extract a substring from</li>
                            <li>The second subnode is the start index to start extracting from</li>
                            <li>The third subnode is how many characters to retrieve</li>
                        </ol>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>A string from the start index with a length equal to the value of the third subnode, unless it hits the end of the string in which case the string is shorter</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>substring</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns 'str' --&gt;
								&lt;substring &gt;
								&lt;const value="fullstring" /&gt;
								&lt;const value="4" /&gt;
								&lt;const value="3" /&gt;
							&lt;/substring&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|tolower</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Converts a string to lower case.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>A single subnode: the string to make lower case</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>The same string, but with no capital letters</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>tolower</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns hi --&gt;
								&lt;tolower &gt;
								&lt;const value="Hi" /&gt;
							&lt;/tolower&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|tostring</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>
                            <img src="../../Resources/ImagesAdmin/TipIcon.jpg" alt="Tip Icon" title="" /> See <MadCap:xref href="#tostring">|tostring</MadCap:xref> in the Convert category for a detailed description of the tostring node.</p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <p MadCap:conditions="General.PDF">&#160;</p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>|toupper</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Converts a string to upper case.</p>
                        <p><b class="DRNumberBold">About</b>
                        </p>
                        <p>Attributes:</p>
                        <ul>
                            <li>comment: (Optional) a description of this node</li>
                        </ul>
                        <p>Accepted subnodes:</p>
                        <ul>
                            <li>
                                <p>A single subnode: the string to make upper case</p>
                            </li>
                        </ul>
                        <p>Returns:</p>
                        <ul>
                            <li>
                                <p>The same string, but with all capital letters</p>
                            </li>
                        </ul>
                        <p><b class="DRNumberBold">Example</b>
                        </p>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>toupper</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- returns HI --&gt;
								&lt;toupper&gt;
								&lt;const value="Hi" /&gt;
							&lt;/toupper&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                        <p MadCap:conditions="General.Online"><a href="#top" alt="Return to Top">Return to Top</a>
                        </p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p MadCap:conditions="General.PDF">&#160;</p>
        <h2 MadCap:conditions="General.PDF"><a name="Const"></a>|Const</h2>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot MadCap:conditions="General.Online">|const</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Represents a constant. Returns the value specified.</p>
                <p><b class="DRNumberBold">About</b>
                </p>
                <p>Attributes:</p>
                <ul>
                    <li>comment: (Optional) a description of this node.</li>
                    <li>value-is-contents: When equal to "true" pulls the text in the xml element to become the value. Useful for defining multiple-line strings.</li>
                    <li>value: (Required) The value to return.</li>
                    <li>
                        <p>type: (Optional) the type the &lt;const&gt; should return. If not specified then it will try to intelligently determine what the type should be based on the value. For example: a value of "true" and "false" will return a boolean. "45" will return an int, and "45.2" will return a double.</p>
                        <p>Accepted values:</p>
                        <ul>
                            <li>Int16</li>
                            <li>Int32</li>
                            <li>Int64</li>
                            <li>Single</li>
                            <li>Double</li>
                            <li>DateTime</li>
                            <li>Boolean</li>
                            <li>Guid</li>
                            <li>String</li>
                        </ul>
                    </li>
                </ul>
                <p>Accepted subnodes:</p>
                <ul>
                    <li>If the value-is-contents attribute is true then a single subnode is required, otherwise the tag should be self-closed.</li>
                </ul>
                <p>Returns:</p>
                <ul>
                    <li>A value with the given type.</li>
                </ul>
                <p><b class="DRNumberBold">Examples</b>
                </p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>const</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns 90 as a string. If the string was not specified, it would have returned an int. --&gt;
							&lt;const value="90" type="String"/&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>const</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- The following two const tags return the same value. --&gt;
								&lt;const value="this is text" /&gt;
								&lt;!-- Note that any new lines are included as part of the constant --&gt;
							&lt;const value-is-contents="true" &gt;this is text&lt;/const &gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>Example 3</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>const</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Sets Owner_Relationship to "SELF" if the Owner is the same as the Insured. --&gt;
								&lt;block&gt;
								&lt;if&gt;
								&lt;condition&gt;
								&lt;and&gt;
								&lt;compare op="=="&gt;
								&lt;diget dataitemid="Insured_SameasApplicant" /&gt;
								&lt;const value="Yes" /&gt;
								&lt;/compare&gt;
								&lt;or&gt;
								&lt;compare op="=="&gt;
								&lt;diget dataitemid="Owner_Applicant" /&gt;
								&lt;const value="Applicant" /&gt;
								&lt;/compare&gt;
								&lt;compare op="=="&gt;
								&lt;diget dataitemid="Owner_Applicant" /&gt;
								&lt;const value="Insured" /&gt;
								&lt;/compare&gt;
								&lt;/or&gt;
								&lt;isnullorwhitespace&gt;
								&lt;diget dataitemid="Owner_Relationship" /&gt;
								&lt;/isnullorwhitespace&gt;
								&lt;/and&gt;
								&lt;/condition&gt;
								&lt;diset dataitemid="Owner_Relationship"&gt;
								&lt;const value="SELF" /&gt;
								&lt;/diset&gt;
								&lt;/if&gt;
							&lt;/block&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                        <p MadCap:conditions="General.Online"><a href="#top" alt="Return to Top">Return to Top</a>
                        </p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p MadCap:conditions="General.PDF">&#160;</p>
        <h2 MadCap:conditions="General.PDF"><a name="Null"></a>|null</h2>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot MadCap:conditions="General.Online">|null</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Represents a null value. Null (unlike in some other languages) has a type.</p>
                <p><b class="DRNumberBold">About</b>
                </p>
                <p>Attributes:</p>
                <ul>
                    <li>
                        <p>type: (Optional) The type of the null, "String" is the default value.</p>
                        <p>Accepted values:</p>
                        <ul>
                            <li>Int16</li>
                            <li>Int32</li>
                            <li>Int64</li>
                            <li>Single</li>
                            <li>Double</li>
                            <li>DateTime</li>
                            <li>Boolean</li>
                            <li>Guid</li>
                            <li>String</li>
                        </ul>
                    </li>
                    <li>comment: (Optional) a description of this node.</li>
                </ul>
                <p>Accepted subnodes:</p>
                <ul>
                    <li>None</li>
                </ul>
                <p>Returns:</p>
                <ul>
                    <li>Null</li>
                </ul>
                <p><b class="DRNumberBold">Example</b>
                </p>
                <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                    <MadCap:codeSnippetCopyButton />
                    <MadCap:codeSnippetCaption>
                        <p>null</p>
                    </MadCap:codeSnippetCaption>
                    <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Returns a null string. --&gt;
					&lt;null type="String"/&gt;</MadCap:codeSnippetBody>
                </MadCap:codeSnippet>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p MadCap:conditions="General.PDF">&#160;</p>
        <h2 MadCap:conditions="General.PDF"><a name="Popup"></a>|popup</h2>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot MadCap:conditions="General.Online">|popup</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Pops up a message and stores the response in the specified field. A popup creates an impossible-to-ignore dialog that overlays the form.</p>
                <p>
                    <img src="../../Resources/ImagesAdmin/TipIcon.jpg" alt="Tip Icon" title="" /> When using popups consider changing the rule scope from "All" to "Property Change." Otherwise the popup will display when the application is loaded from save.</p>
                <p><b>NOTE:</b> In <MadCap:xref href="AdvancedRulesSamples.htm" target="_blank" alt="Advanced Rules Samples">Advanced Rules Samples</MadCap:xref>, see "Include HTML in Popups" for information about adding HTML to popups.</p>
                <p><b class="DRNumberBold">About</b>
                </p>
                <p>Attributes:</p>
                <ul>
                    <li>dataitemid: (Required) The DataItemId associated with the popup that will store the value of the button pressed</li>
                    <li>title: (Required) the title of the popup</li>
                    <li>buttons: (Required) the buttons' text separated by |</li>
                    <li>html: (Optional) if true, then the popup will display the message as HTML</li>
                    <li>comment: (Optional) a description of this node.</li>
                </ul>
                <p>Accepted subnodes:</p>
                <ul>
                    <li>A single subnode that contains the message to display in the popup</li>
                </ul>
                <p>Returns:</p>
                <ul>
                    <li>None</li>
                </ul>
                <p><b class="DRNumberBold">Examples</b>
                </p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>popup</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- pops a message that says 'message text' and stores the button pressed in 'TargetDataItemId' --&gt;
								&lt;popup dataitemid="TargetDataItemId" title="optional title" buttons="OK|Cancel" &gt;
								&lt;const value="message text" /&gt;
							&lt;popup&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>popup</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Displays a popup when the Accidental Death rider is selected --&gt;
								&lt;if&gt;
								&lt;condition&gt;
								&lt;compare op="=="&gt;
								&lt;diget dataitemid="Feature_AccidentDeath" /&gt;
								&lt;const value="Yes" type="string" /&gt;
								&lt;/compare&gt;
								&lt;/condition&gt;
								&lt;popup dataitemid="Feature_AccidentDeath_Label" title="Accidental Death" buttons="OK"&gt;
								&lt;const value="Client cannot have more than $500,000.00 of Accidental Insurance in force on their life. See Rate Book for additional information." /&gt;
								&lt;/popup&gt;
							&lt;/if&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>Sample Confirmation dialog</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <p>Use the popup node to add a confirmation dialog to a data item such as when the Client is not required to provide an email address during the e-signature process (see “Optional Client Email” access permission in Organization Configuration &gt; Groups on the <MadCap:xref href="../../Organization Configuration/Groups/App.htm" target="_blank" alt="App">App</MadCap:xref> tab). <MadCap:conditionalText MadCap:conditions="General.Online">Following is an example of a pop-up when the client email address is not entered during the e-signature process.</MadCap:conditionalText></p>
                        <p class="Indent" MadCap:conditions="General.Online">
                            <img src="../../Resources/ImagesAdmin/SamplePopup.jpg" alt="Sample Pop-up" title="Sample Pop-up" />
                        </p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p MadCap:conditions="General.PDF">&#160;</p>
        <h2 MadCap:conditions="General.PDF"><a name="PostMessage"></a>|postmessage</h2>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot MadCap:conditions="General.Online">|postmessage</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Posts an error message to the field. The error message turns the field red and will prevent the application from being submitted. If a warning option is used then the error message will turn the field yellow and will not stop the application from being submitted.</p>
                <p><b class="DRNumberBold">About</b>
                </p>
                <p>Attributes:</p>
                <ul>
                    <li>dataitemid: (Required) The DataItemId for which to post the message</li>
                    <li>
                        <p>option: (Optional) The flags you can apply to this message </p>
                        <p>Accepted values:</p>
                        <ul>
                            <li>None</li>
                            <li>Warning</li>
                            <li>NoPopup</li>
                            <li>WarningAndNoPopup</li>
                        </ul>
                    </li>
                    <li>comment: (Optional) a description of this node</li>
                </ul>
                <p>Accepted subnodes:</p>
                <ul>
                    <li>A single subnode containing the message to display with the error message</li>
                </ul>
                <p>Returns:</p>
                <ul>
                    <li>None</li>
                </ul>
                <p><b class="DRNumberBold">Examples</b>
                </p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>postmessage</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Adds a warning instead of an error for 'someDataItem' --&gt;
								&lt;postmessage dataitemid="someDataItem" option="None"&gt;
								&lt;const value="this is a not an error message, but just a warning"/&gt;
							&lt;/postmessage&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>postmessage</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Makes the Father health field required --&gt;
								&lt;block&gt;
								&lt;set name="message"&gt;
								&lt;const value="NONE" /&gt;
								&lt;/set&gt;
								&lt;set name="postmessage"&gt;
								&lt;const value="false" /&gt;
								&lt;/set&gt;
								&lt;if&gt;
								&lt;condition&gt;
								&lt;isnullorwhitespace&gt;
								&lt;diget dataitemid="Person_Father_Health[FORM_INDEX]" /&gt;
								&lt;/isnullorwhitespace&gt;
								&lt;/condition&gt;
								&lt;set name="postmessage"&gt;
								&lt;const value="true" /&gt;
								&lt;/set&gt;
								&lt;set name="message"&gt;
								&lt;const value="Father health is a required field." /&gt;
								&lt;/set&gt;
								&lt;/if&gt;
								&lt;if&gt;
								&lt;condition&gt;
								&lt;get name="postmessage" /&gt;
								&lt;/condition&gt;
								&lt;postmessage dataitemid="Person_Father_Health[FORM_INDEX]"&gt;
								&lt;get name="message" /&gt;
								&lt;/postmessage&gt;
								&lt;else /&gt;
								&lt;removemessage dataitemid="Person_Father_Health[FORM_INDEX]" /&gt;
								&lt;/if&gt;
							&lt;/block&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                        <p MadCap:conditions="General.Online"><a href="#top" alt="Return to Top">Return to Top</a>
                        </p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <p MadCap:conditions="General.PDF">&#160;</p>
        <h2 MadCap:conditions="General.PDF"><a name="RemoveMessage"></a>|removemessage</h2>
        <MadCap:dropDown>
            <MadCap:dropDownHead>
                <MadCap:dropDownHotspot MadCap:conditions="General.Online">|removemessage</MadCap:dropDownHotspot>
            </MadCap:dropDownHead>
            <MadCap:dropDownBody>
                <p>Removes all error messages from the field that were added by the same rule this node is in. &lt;removemessage&gt; cannot remove error messages placed on the same field by other rules. Error messages are placed on fields with &lt;postmessage&gt;.</p>
                <p><b class="DRNumberBold">About</b>
                </p>
                <p>Attributes:</p>
                <ul>
                    <li>dataitemid: (Required) The DataItemId to remove all error or warning messages from.</li>
                    <li>comment: (Optional) a description of this node</li>
                </ul>
                <p>Accepted subnodes:</p>
                <ul>
                    <li>None (must be self-closed)</li>
                </ul>
                <p>Returns:</p>
                <ul>
                    <li>None</li>
                </ul>
                <p><b class="DRNumberBold">Examples</b>
                </p>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>Example 1</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>removemessage</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Removes all error messages for 'someDataItem' that were added by the rule this node is in. --&gt;
							&lt;removemessage dataitemid="someDataItem" /&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
                <MadCap:dropDown>
                    <MadCap:dropDownHead>
                        <MadCap:dropDownHotspot>Example 2</MadCap:dropDownHotspot>
                    </MadCap:dropDownHead>
                    <MadCap:dropDownBody>
                        <MadCap:codeSnippet style="caption-side: ; mc-caption-repeat: ;">
                            <MadCap:codeSnippetCopyButton />
                            <MadCap:codeSnippetCaption>
                                <p>removemessage</p>
                            </MadCap:codeSnippetCaption>
                            <MadCap:codeSnippetBody MadCap:useLineNumbers="False" MadCap:lineNumberStart="1" MadCap:continue="False" xml:space="preserve" style="mc-code-lang: XML;">&lt;!-- Sets and removes an error message on Annuitant Gender --&gt;
								&lt;block&gt;
								&lt;set name="message"&gt;
								&lt;const value="NONE" /&gt;
								&lt;/set&gt;
								&lt;set name="postmessage"&gt;
								&lt;const value="false" /&gt;
								&lt;/set&gt;
								&lt;if&gt;
								&lt;condition&gt;
								&lt;isnullorwhitespace&gt;
								&lt;diget dataitemid="Annuitant_Gender" /&gt;
								&lt;/isnullorwhitespace&gt;
								&lt;/condition&gt;
								&lt;set name="postmessage"&gt;
								&lt;const value="true" /&gt;
								&lt;/set&gt;
								&lt;set name="message"&gt;
								&lt;const value="Annuitant gender is required field" /&gt;
								&lt;/set&gt;
								&lt;/if&gt;
								&lt;if&gt;
								&lt;condition&gt;
								&lt;get name="postmessage" /&gt;
								&lt;/condition&gt;
								&lt;postmessage dataitemid="Annuitant_Gender"&gt;
								&lt;get name="message" /&gt;
								&lt;/postmessage&gt;
								&lt;else /&gt;
								&lt;removemessage dataitemid="Annuitant_Gender" /&gt;
								&lt;/if&gt;
							&lt;/block&gt;</MadCap:codeSnippetBody>
                        </MadCap:codeSnippet>
                        <p MadCap:conditions="General.Online"><a href="#top" alt="Return to Top">Return to Top</a>
                        </p>
                    </MadCap:dropDownBody>
                </MadCap:dropDown>
            </MadCap:dropDownBody>
        </MadCap:dropDown>
        <MadCap:pageBreak />
    </body>
</html>